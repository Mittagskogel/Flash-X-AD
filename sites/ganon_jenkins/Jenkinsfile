pipeline {
    triggers { pollSCM('') }  // Run tests whenever a new commit is detected.
    agent { dockerfile {
        dir 'sites/ganon_jenkins'
	args '-v /mnt/scratch/weaklib-tables:/weaklib-tables:ro'
    } } // Use the specified dockerfile and mount the weaklib tables as a volume
    environment {
        pathToSimulations = '../source/Simulation/SimulationMain' // Needed in order for Flash-X-Test to know where to find files
	HOME="${env.WORKSPACE}"  // needed to be able to initialize flash-x-test
	// Get rid of Read -1, expected <someNumber>, errno =1 error
        // See https://github.com/open-mpi/ompi/issues/4948
        OMPI_MCA_btl_vader_single_copy_mechanism = 'none'
    }
    stages {

        //=============================//
    	// Set up submodules and amrex //
        //=============================//
    	stage('Prerequisites'){ steps{
	    withCredentials([gitUsernamePassword(credentialsId: 'github_personal_access_token', gitToolName: 'git-tool')]) {
	        sh 'git submodule update --init'
		sh 'pip3 install git+https://github.com/Flash-X/Flash-X-Test.git@2023.01'
	    }
	    dir('lib/amrex/source'){
	        sh '''
	        ./configure --prefix=install/2D --dim=2; make -j8; make install
	        ./configure --prefix=install/3D --dim=3; make -j8; make install
	        '''
	    }
	    sh 'mpicc -v'
	}}

	stage('Relaxation'){ steps{
	    sh "./setup Relaxation -site=ganon_jenkins -auto -3d +cartesian +cube16 +thornado nE=16 swE=1 nSpecies=6 nNodes=2 nMoments=4 momentClosure=MINERBO thornadoOrder=ORDER_V +weaklib -parfile=test_3d.par -objdir=${STAGE_NAME}"
	    dir("${STAGE_NAME}"){
	        sh "ln -s /weaklib-tables/SFHo/LowRes/wl-Op-SFHo-15-25-50-E40-B85-AbEm.h5"
		sh "ln -s /weaklib-tables/SFHo/LowRes/wl-Op-SFHo-15-25-50-E40-B85-Iso.h5"
		sh "ln -s /weaklib-tables/SFHo/LowRes/wl-Op-SFHo-15-25-50-E40-B85-NES.h5"
		sh "ln -s /weaklib-tables/SFHo/LowRes/wl-Op-SFHo-15-25-50-E40-B85-Pair.h5"
		sh "ln -s /weaklib-tables/SFHo/LowRes/wl-Op-SFHo-15-25-50-E40-HR98-Brem.h5"
		sh "ln -s /weaklib-tables/SFHo/LowRes/wl-EOS-SFHo-15-25-50.h5"
	        sh "make -j EXE=flash-exe"
		//sh "mpiexec -n 8 flash-exe"
	    }
	}}


	stage('StreamingSineWave'){ steps{
	    sh './setup StreamingSineWave -site=ganon_jenkins -auto -3d +cartesian -nxb=16 -nyb=16 -nzb=16 +pm4dev Bittree=True -gridinterpolation=native +spark swE=1 nE=2 nSpecies=1 nNodes=2 nMoments=4 momentClosure=MINERBO thornadoOrder=ORDER_V -parfile=tests/test_amr_3d.par  -objdir=${STAGE_NAME}'
	    dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
                    sh "mpiexec -n 8 flash-exe"
	    }
	}}


	//==================================================//
        // Run some UnitTests tests without Flash-X-Test    //
	//==================================================//
        stage('UnitTests'){ stages {
	    
	    stage('Eos_helmholtz_3d_AMReX'){ steps{
		sh './setup unitTest/Eos/Helmholtz -site=ganon_jenkins -auto +amrex -3d +noio -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Eos_helmholtz_3d_pm4dev'){ steps{
		sh './setup unitTest/Eos/Helmholtz -site=ganon_jenkins -auto +pm4dev -3d +noio -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Eos_starkiller_3d_pm4dev'){ steps{
		sh './setup unitTest/Eos/Helmholtz/starkiller -site=ganon_jenkins -auto +pm4dev -3d +noio -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Eos_weaklib_3d_pm4dev'){ steps{
		sh './setup unitTest/Eos/WeakLib -site=ganon_jenkins -auto +pm4dev -3d +noio -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Gravity_AMR_2dCyl_Paramesh'){ steps{
		sh './setup unitTest/Gravity/Poisson3 -site=ganon_jenkins -auto -2d +cylindrical +newmpole -debug -maxblocks=600 +noio +pm4dev -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
                    sh "cp ${env.pathToSimulations}/unitTest/Gravity/Poisson3/tests/test_flash_2dcyl.par flash.par"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Gravity_AMR_3d_Paramesh'){ steps{
		sh './setup unitTest/Gravity/Poisson3 -site=ganon_jenkins -auto -3d +newmpole +uhd -debug -maxblocks=550 -nxb=8 -nyb=8 -nzb=8 -gridinterpolation=monotonic -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Grid_AMR_AMReX_2d_FluxCorrection'){ steps{
		sh './setup unitTest/Grid/Amrex/TestFluxCorrection -site=ganon_jenkins -auto -2d -nxb=8 -nyb=8 +noio +amrex -objdir=${STAGE_NAME} -parfile=tests/test_amrex_grid.par'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Grid_AMR_AMReX_2d_FluxCorrection2'){ steps{
		sh './setup unitTest/Grid/Amrex/TestFluxCorrection2 -site=ganon_jenkins -auto -2d -nxb=8 -nyb=8 +noio +amrex -objdir=${STAGE_NAME} -parfile=tests/test_amrex_grid.par'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('Grid_AMR_AMReX_2d_Init'){ steps{
		sh './setup unitTest/Grid/Amrex/TestInit -site=ganon_jenkins -auto -2d -nxb=8 -nyb=4 +noio +amrex -objdir=${STAGE_NAME} -parfile=tests/test_amrex_grid.par'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    //stage('Grid_AMR_AMReX_2d_Refine'){ steps{
		//sh './setup unitTest/Grid/Amrex/TestRefine -site=ganon_jenkins -auto -2d -nxb=8 -nyb=8 +noio +amrex -objdir=${STAGE_NAME} -parfile=tests/test_amrex_grid.par'
		//dir("${STAGE_NAME}"){
		    //sh "make -j EXE=flash-exe"
		    //sh "mpiexec -n 1 flash-exe"
                //}
	    //}}

	    stage('Grid_AMR_AMReX_2d_TestCyl'){ steps{
		sh './setup unitTest/Grid/Amrex/TestCyl2d -site=ganon_jenkins -auto -2d -nxb=8 -nyb=4 +noio +amrex -objdir=${STAGE_NAME} -parfile=tests/test_amrex_grid.par'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('GridAnomalousRefine_2d_AMReX'){ steps{
		sh './setup unitTest/Grid/AnomalousRefine -site=ganon_jenkins -auto -2d +spherical +amrex -nxb=8 -nyb=8 -unit=IO/IOMain/hdf5/serial/AM -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 3 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 3"
                }
	    }}

	    stage('GridAnomalousRefine_2d_Paramesh'){ steps{
		sh './setup unitTest/Grid/AnomalousRefine -site=ganon_jenkins -auto -2d +spherical -nxb=8 -nyb=8 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('GridAnomalousRefine_2d_pm4AltMortonBittree'){ steps{
		sh './setup unitTest/Grid/AnomalousRefine -site=ganon_jenkins -auto -2d +spherical AltMorton=True Bittree=True -nxb=8 -nyb=8 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 1 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 1"
                }
	    }}

	    stage('IO_hdf5_3d_pm4dev'){ steps{
		sh './setup unitTest/IO -site=ganon_jenkins -auto --index-reorder -3d +cube16 +parallelIO nVars=25 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
                    sh "cp ${env.pathToSimulations}/unitTest/IO/tests/test_PM_3d_noparticles.par flash.par"
		    sh "mpiexec -n 4 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` -ge 1"
                }
	    }}

	    stage('LidDrivenCavity_AMReX_2d'){ steps{
		sh './setup incompFlow/LidDrivenCavity -site=ganon_jenkins -auto -2d -nxb=16 -nyb=16 +amrex +noio -maxblocks=100 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 4 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 4"
                }
	    }}

	    stage('PointMassGravity_2dCyl_AMReX'){ steps{
		sh './setup unitTest/Gravity/PointMass -site=ganon_jenkins -auto -2d +amrex +cylindrical +noio -debug -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
                    sh "cp ${env.pathToSimulations}/unitTest/Gravity/PointMass/tests/test_2dcyl.par flash.par"
		    sh "mpiexec -n 2 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 2"
                }
	    }}

	    stage('PointMassGravity_2dCyl_Paramesh'){ steps{
		sh './setup unitTest/Gravity/PointMass -site=ganon_jenkins -auto -2d +pm4dev +cylindrical +serialIO -debug -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
                    sh "cp ${env.pathToSimulations}/unitTest/Gravity/PointMass/tests/test_2dcyl.par flash.par"
		    sh "mpiexec -n 2 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 2"
                }
	    }}

	    stage('PointMassGravity_3d_AMReX'){ steps{
		sh './setup unitTest/Gravity/PointMass -site=ganon_jenkins -auto -3d +amrex +noio -maxblocks=10 -nxb=8 -nyb=8 -nzb=8 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 3 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 3"
                }
	    }}

	    stage('PointMassGravity_3d_Paramesh'){ steps{
		sh './setup unitTest/Gravity/PointMass -site=ganon_jenkins -auto -3d +pm4dev -maxblocks=550 -nxb=8 -nyb=8 -nzb=8 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 3 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 3"
                }
	    }}

	    stage('RisingBubble_AMReX_2d'){ steps{
		sh './setup incompFlow/RisingBubble -site=ganon_jenkins -auto -2d -nxb=16 -nyb=16 +amrex +noio -maxblocks=100 -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 2 flash-exe"
		    sh "ls unitTest_0??? >/dev/null && fgrep -C3 'all results conformed with expected values.' unitTest_0???"
		    sh "cat unitTest_0???"
		    sh "test `fgrep -n 'all results conformed with expected values.' unitTest_0???|wc -l` = 2"
                }
	    }}


        }} //stage('UnitTests'){ stages {

        stage('CompositeRun'){ stages {
	    stage('C_Sod_PseudoUG_2d_Paramesh_simpleUnsplit'){ steps{
		sh './setup Sod -site=ganon_jenkins -auto -2d -debug -nxb=8 -nyb=8 +sHLL +pm4dev -gridinterpolation=native HydroGuardcells=1 -parfile=tests/test_pseudoug_2d.par -objdir=${STAGE_NAME}'
		dir("${STAGE_NAME}"){
		    sh "make -j EXE=flash-exe"
		    sh "mpiexec -n 4 flash-exe"
		    sh "cat amr_runtime_parameters.dump || /bin/true"
		    sh "ls -ld sod.???"
		    sh "ls -lhd flashx_hdf5_*"

		    sh "cp ${env.pathToSimulations}/Sod/tests/test_pseudoug_2d_restart.par flash.par""
		    sh "mpiexec -n 4 flash-exe"
		    sh "ls -ld sod.???"
		    sh "ls -lhd flashx_hdf5_*"
                }
	    }}

        }} //stage('CompositeRun'){ stages {


	//==================================================//
        // Run all of the official tests using Flash-X-Test //
	//==================================================//
        stage('UnitTest'){ steps{
	    sh ".local/bin/flashxtest init -z ${env.WORKSPACE} -s ganon_jenkins"
	    sh ".local/bin/flashxtest setup-suite sites/ganon_jenkins/UnitTests.suite"
	    sh ".local/bin/flashxtest run-suite"
	    archiveArtifacts artifacts: '**/setup_output', allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/setup_call'  , allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/setup_error' , allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/gmake_output', allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/gmake_error' , allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/flash_output', allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/flash_error' , allowEmptyArchive: true
	    archiveArtifacts artifacts: '**/*.log'       , allowEmptyArchive: true
	}} //stage('UnitTest'){ steps{
	
    } // stages{

    post {
        always {
	    cleanWs(
	        cleanWhenNotBuilt: false,
		deleteDirs: true,
		disableDeferredWipeout: false,
		notFailBuild: true,
		patterns: [[pattern: 'lib', type: 'EXCLUDE']] ) // allow amrex to be cached
	}
    }

} // pipeline{
