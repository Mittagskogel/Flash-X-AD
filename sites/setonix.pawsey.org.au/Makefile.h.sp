# FLASH makefile definitions for Setonix at Pawsey
# Created by Christoph Federrath (2023)
#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths -- these need to be updated for your system
#----------------------------------------------------------------------------

MPI_PATH   =
HDF4_PATH  =
HDF5_PATH  = $(HDF5_DIR)
HYPRE_PATH =
ZLIB_PATH  =
PAPI_PATH  =
PAPI_FLAGS =
NCMPI_PATH =
MPE_PATH   =

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------

FCOMP   = ftn
CCOMP   = cc
CPPCOMP = CC
LINK    = ftn

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

OPENMP = -fopenmp

FFLAGS_OPT = -c -sdefault32 -sinteger32 -O3 -hfp2
FFLAGS_DEBUG = -c -g -sdefault32 -sinteger32 -hfp2 -check bounds -check format -check output_conversion -warn all
FFLAGS_TEST = -c -sdefault32 -sinteger32 -O3 -hfp2

FFLAGS_HYPRE = -I${HYPRE_PATH}/include

F90FLAGS =

CFLAGS_OPT   = -c -O3
CFLAGS_DEBUG = -c -g -debug extended
CFLAGS_TEST  = -c -O3

CFLAGS_HDF5  = -I$(HDF5_PATH)/include
CFLAGS_NCMPI = -I${NCMPI_PATH}/include
CFLAGS_HYPRE = -I${HYPRE_PATH}/include

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -sdefault32 -sinteger32 -lstdc++ -o
LFLAGS_DEBUG = -sdefault32 -sinteger32 -lstdc++ -g -o
LFLAGS_TEST  = -sdefault32 -sinteger32 -lstdc++ -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_OPT   =
LIB_DEBUG =
LIB_TEST  =

LIB_HDF4  =
LIB_HDF5  = -L $(HDF5_PATH)/lib -lhdf5 -lz

LIB_PAPI  =
LIB_MATH  =

LIB_MPI   =
LIB_NCMPI = -L ${NCMPI_PATH}/lib -lpnetcdf
LIB_MPE   =

LIB_HYPRE = -L ${HYPRE_PATH}/lib -lHYPRE

# Uncomment the following line to use electic fence memory debugger.
# export EF_ALLOW_MALLOC_0=1
#CONFIG_LIB = -L/usr/lib64 -lefence

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

#----------------------------------------------------------------------------
# Fake existence of iso_c_bindings module to prevent unnecessary recompilations.
#---------------------------------------------------------------------------- 
ifeq ($(FLASHBINARY),true)
iso_c_binding.mod :
	touch $@
## ACCORDING TO DOWNGWOOK LEE:
#gcc version 4.9.1 results in MPI communication errors
#unless we compile with -O0
### THE ERROR MESSAGE IS THE FOLLOWING:
#Paramesh error : pe            1  needed full blk            2
#> 0  but could not find it or only  found part of it in the message buffer.
#> Contact PARAMESH developers for help.

mpi_amr_1blk_guardcell.o : %.o : %.F90
	$(FCOMP) $(FFLAGS) -O0 $(F90FLAGS) $(FDEFINES)  $<
endif
