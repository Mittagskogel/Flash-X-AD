#!!
#!!  Macros for filling cell-specific values
#!!  assuming i1, j1, k1 loops outside of macros
#!!  where i1, j1, k1 are consistent with the grid indices,
#!!  i.e., either blkLimits or blkLimitsGC for most cases.
#!!

#!!  cell coordinates

[Grid_getCenterCoords]
args=x0,axis,deltas,i1,coords
definition =
  coords(i1) = x0(axis) + (i1 - 0.5)*deltas(axis)

[Grid_getLeftEdgeCoords]
args=x0,axis,deltas,i1,coords
definition =
  coords(i1) = x0(axis) + (i1 - 1.0)*deltas(axis)

[Grid_getRightEdgeCoords]
args=x0,axis,deltas,i1,coords
definition =
  coords(i1) = x0(axis) + i1 * deltas(axis)



#!!  cell face areas

[Grid_getFaceAreas_IAXIS_Cartesian]
args=x0,deltas,area,i1,j1,k1
definition =
 #if   NDIM == 1
  area(i1,j1,k1) = 1.0
 #elif NDIM == 2
  area(i1,j1,k1) = deltas(JAXIS)
 #elif NDIM == 3
  area(i1,j1,k1) = deltas(JAXIS)*deltas(KAXIS)
 #endif

[Grid_getFaceAreas_JAXIS_Cartesian]
args=x0,deltas,area,i1,j1,k1
definition =
 #if   NDIM == 1
  area(i1,j1,k1) = 1.0
 #elif NDIM == 2
  area(i1,j1,k1) = deltas(IAXIS)
 #elif NDIM == 3
  area(i1,j1,k1) = deltas(IAXIS)*deltas(KAXIS)
 #endif

[Grid_getFaceAreas_KAXIS_Cartesian]
args=x0,deltas,area,i1,j1,k1
definition =
 #if   NDIM == 1
  area(i1,j1,k1) = 1.0
 #elif NDIM == 2
  area(i1,j1,k1) = 1.0
 #elif NDIM == 3
  area(i1,j1,k1) = deltas(IAXIS)*deltas(JAXIS)
 #endif



[Grid_getFaceAreas_IAXIS_Cylindrical]
args=x0,deltas,area,i1,j1,k1
definition =
 #if   NDIM == 1
  area(i1,j1,k1) = 2.0*PI*ABS( x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS) )
 #elif NDIM == 2
  area(i1,j1,k1) = 2.0*PI*ABS( x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS) )*deltas(JAXIS)
 #elif NDIM == 3
  area(i1,j1,k1) = ABS( x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS) )*deltas(JAXIS)*deltas(KAXIS)
 #endif

[Grid_getFaceAreas_JAXIS_Cylindrical]
args=x0,deltas,area,i1,j1,k1
definition =
 #if   NDIM == 1
  area(i1,j1,k1) = PI * ABS( &
                      (x0(IAXIS) + i1*deltas(IAXIS))**2 &
                     -(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS))**2 &
                  )
 #elif NDIM == 2
  area(i1,j1,k1) = PI * ABS( &
                      (x0(IAXIS) + i1*deltas(IAXIS))**2 &
                     -(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS))**2 &
                  )
 #elif NDIM == 3
  area(i1,j1,k1) = 0.5 * ABS( &
                      (x0(IAXIS) + i1*deltas(IAXIS))**2 &
                     -(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS))**2 &
                  )*deltas(KAXIS)
 #endif

[Grid_getFaceAreas_KAXIS_Cylindrical]
args=x0,deltas,area,i1,j1,k1
definition =
 #if   NDIM == 1
  area(i1,j1,k1) = deltas(IAXIS)
 #elif NDIM == 2
  area(i1,j1,k1) = deltas(IAXIS) * deltas(JAXIS)
 #elif NDIM == 3
  area(i1,j1,k1) = deltas(IAXIS) * deltas(JAXIS)
 #endif





[Grid_getFaceAreas_IAXIS_Spherical]
args=x0,deltas,area,i1,j1,k1
definition =
  area(i1,j1,k1) = (x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS))**2
 #if   NDIM == 1
  area(i1,j1,k1) = area(i1,j1,k1) * 4.0 * PI
 #elif NDIM == 2
  area(i1,j1,k1) = area(i1,j1,k1) * ABS( &
                     cos( x0(JAXIS) + (j1 - 1.0)*deltas(JAXIS) ) &
                    -cos( x0(JAXIS) + j1*deltas(JAXIS) ) &
                   ) * 2.0 * PI
 #elif NDIM == 3
  area(i1,j1,k1) = area(i1,j1,k1) * ABS( &
                     cos( x0(JAXIS) + (j1 - 1.0)*deltas(JAXIS) ) &
                    -cos( x0(JAXIS) + j1*deltas(JAXIS) ) &
                   ) * deltas(KAXIS)
 #endif

[Grid_getFaceAreas_JAXIS_Spherical]
args=x0,deltas,area,i1,j1,k1
definition =
  area(i1,j1,k1) =  ( (x0(IAXIS) + i1*deltas(IAXIS)) &
                     +(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS)) ) &
                   *( (x0(IAXIS) + i1*deltas(IAXIS)) &
                     -(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS)) ) * 0.5
 #if   NDIM == 1
  area(i1,j1,k1) = area(i1,j1,k1) * 2.0 * PI
 #elif NDIM == 2
  area(i1,j1,k1) = area(i1,j1,k1) * ABS( &
                     sin( x0(JAXIS) + (j1 - 1.0)*deltas(JAXIS) ) &
                   ) * 2.0 * PI
 #elif NDIM == 3
  area(i1,j1,k1) = area(i1,j1,k1) * ABS( &
                     sin( x0(JAXIS) + (j1 - 1.0)*deltas(JAXIS) ) &
                   ) * deltas(KAXIS)
 #endif

[Grid_getFaceAreas_KAXIS_Spherical]
args=x0,deltas,area,i1,j1,k1
definition =
  area(i1,j1,k1) =  ( (x0(IAXIS) + i1*deltas(IAXIS)) &
                     +(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS)) ) &
                   *( (x0(IAXIS) + i1*deltas(IAXIS)) &
                     -(x0(IAXIS) + (i1 - 1.0)*deltas(IAXIS)) ) * 0.5
 #if   NDIM == 1
  area(i1,j1,k1) = area(i1,j1,k1) * PI
 #elif NDIM == 2
  area(i1,j1,k1) = area(i1,j1,k1) * deltas(JAXIS)
 #elif NDIM == 3
  area(i1,j1,k1) = area(i1,j1,k1) * deltas(JAXIS)
 #endif



#!!  cell volumes

[Grid_getCellVolumes_Cartesian]
args=x0,deltas,vol,i1,j1,k1
definition =
 #if   NDIM == 1
  vol(i1,j1,k1) = deltas(IAXIS)
 #elif NDIM == 2
  vol(i1,j1,k1) = deltas(IAXIS) * deltas(JAXIS)
 #elif NDIM == 3
  vol(i1,j1,k1) = deltas(IAXIS) * deltas(JAXIS) * deltas(KAXIS)
 #endif

[Grid_getCellVolumes_Cylindrical]
args=x0,deltas,vol,i1,j1,k1
definition =
  vol(i1,j1,k1) = ABS(x0(IAXIS) + (i1 - 0.5) * deltas(IAXIS))
 #if   NDIM == 1
  vol(i1,j1,k1) = 2.0 * PI * vol(i1,j1,k1) * deltas(IAXIS)
 #elif NDIM == 2
  vol(i1,j1,k1) = 2.0 * PI * vol(i1,j1,k1) * deltas(IAXIS) * deltas(JAXIS)
 #elif NDIM == 3
  vol(i1,j1,k1) = vol(i1,j1,k1) * deltas(IAXIS) * deltas(JAXIS) * deltas(KAXIS)
 #endif

[Grid_getCellVolumes_Spherical]
args=x0,deltas,vol,i1,j1,k1
definition =
  vol(i1,j1,k1) = x0(IAXIS) + (i - 1.0)*deltas(IAXIS)
  vol(i1,j1,k1) = deltas(IAXIS) *  &
                  ( vol(i1,j1,k1) * vol(i1,j1,k1) + &
                    vol(i1,j1,k1) * (vol(i1,j1,k1)+deltas(IAXIS)) +  &
                    (vol(i1,j1,k1)+deltas(IAXIS)) * (vol(i1,j1,k1)+deltas(IAXIS)) )
 #if   NDIM == 1
  vol(i1,j1,k1) = vol(i1,j1,k1) * 4.*PI/3.
 #elif NDIM == 2
  vol(i1,j1,k1) = vol(i1,j1,k1) * &
                  ABS( &
                     cos(x0(JAXIS)+(j1-1.0)*deltas(JAXIS)) &
                     -cos(x0(JAXIS)+j1*deltas(JAXIS)) &
                  )*2.*PI/3.0
 #elif NDIM == 3
  vol(i, j, k) = vol(i1,j1,k1) * &
                 ABS( &
                    cos(x0(JAXIS)+(j1-1.0)*deltas(JAXIS)) &
                    -cos(x0(JAXIS)+j1*deltas(JAXIS)) &
                 )*deltas(KAXIS) / 3.0
 #endif


