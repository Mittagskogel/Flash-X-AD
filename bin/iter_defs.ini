
[tileDesc_use]
definition =
    use Grid_tile, ONLY: Grid_tile_t

[tileDesc_spec]
definition =
   type(Grid_tile_t)     :: tileDesc

[tileDesc_arg]
definition =
   type(Grid_tile_t),intent(in)     :: tileDesc

[tileDesc_get]
args =lim1,lim2,lim3,del
definition =
     lim1(:,:)=tileDesc%%limits
     lim2(:,:)=tileDesc%%blkLimitsGC
     lim3(:,:)=tileDesc%%grownLimits
     call tileDesc%%deltas(del)
     level=tileDesc%%level


[tileDesc_declare]
args = lim1,lim2,lim3
definition =
   integer :: level
   integer, dimension(LOW:HIGH,MDIM) :: lim1,lim2,lim3
   real,dimension(MDIM) :: deltas


[iter_use]
definition =
  use Grid_interface, ONLY : Grid_getTileIterator, Grid_releaseTileIterator
  use Grid_tile,         ONLY : Grid_tile_t
  use Grid_iterator,     ONLY : Grid_iterator_t

[iter_declare]
args=lim1,lim2,lim3,Uin
definition =
   type(Grid_iterator_t) :: itor
   @M tileDesc_spec
   integer, dimension(LOW:HIGH,MDIM) :: lim1,lim2,lim3
   real,dimension(:,:,:,:),pointer :: Uin


[iter_all_begin]
args=x1,t1,lim1,lim2,del,Uin
definition = 
  call Grid_getTileIterator(itor, x1, tiling=t1)
  do while(itor%%isValid())
     call itor%%currentTile(tileDesc)
     @M tileDesc_get(lim1,lim2,grownLimits,del)
     call tileDesc%%getDataPtr(Uin, CENTER)

[iter_end]
args=Uin
definition =
         call tileDesc%%releaseDataPtr(Uin,CENTER)
         call itor%%next()
      end do !!block loop
      call Grid_releaseTileIterator(itor)

[iter_level_begin]
args=x1,t1,l1,lim1,lim2,del,Uin
definition=
      call Grid_getTileIterator(itor,x1,level=l1,tiling=t1)
      do while(itor%%isValid())
         call itor%%currentTile(tileDesc)
 	 @M tileDesc_get(lim1,lim2,grownLimits,del)
	 call tileDesc%%getDataPtr(Uin, CENTER)


