subroutine mph_setWeberJumps2d(phi, sigx, sigy, dx, dy, invWbr, rhoGas, ix1, ix2, jy1, jy2)
!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
   !
   implicit none

   !-----Argument list-------------------
   integer, intent(in) :: ix1, ix2, jy1, jy2
   real, intent(in) :: dx, dy, invWbr, rhoGas
   real, dimension(:, :, :), intent(in) :: phi
   real, dimension(:, :, :), intent(inout) :: sigx, sigy

   !-------Local variables---------------
   real, dimension(ix1:ix2, jy1:jy2, 1) :: crv, pf, nmx, nmy
   real :: th, aa, xijl, xijr, &
           cri, xij, yij, yijl, yijr
   integer :: i, j, k
   real, parameter :: eps = 1E-13
   real :: rPhiXN, rPhiXE, rPhiXS, rPhiXW, &
           rPhiYN, rPhiYE, rPhiYS, rPhiYW, &
           rMagN, rMagE, rMagS, rMagW
   real, parameter :: pi = acos(-1.0)
   real :: iSmear, crvFace, nrmFace

   !--------------------------------------------
   !----------------jump conditions ------------
   !--------------------------------------------
   !xij: jump in value
   !xid: jump in gradient
   !l,r, values at pts left and right of the interface
   !crv: curvature
   !cri: curvature at interface

   !left interface between i and i+1
   !  phase 2 at i, phase 1 at i+1
   !  theta = x_i+1 - x_I

   !right interface between i and i+1
   !  phase 1 at i, phase 2 at i+1
   !  theta = x_I - x_i
   !--------------------------------------------
   !--------------------------------------------

   iSmear = 2.5*sqrt(dx**2 + dy**2)
   k = 1
   crv = 0.
   pf = 0.
   nmx = 0.
   nmy = 0.

   do j = jy1, jy2
      do i = ix1, ix2

         if (abs(phi(i, j, k)) .le. iSmear) then
            pf(i, j, k) = 0.5 + phi(i, j, k)/(2*iSmear) + sin(2*pi*phi(i, j, k)/(2*iSmear))/(2*pi)

         else
            if (phi(i, j, k) .ge. 0.0) then
               pf(i, j, k) = 1.0

            else
               pf(i, j, k) = 0.0

            end if
         end if

      end do
   end do

   pf(ix1:ix2, jy1:jy2, k) = pf(ix1:ix2, jy1:jy2, k)*rhoGas + (1 - pf(ix1:ix2, jy1:jy2, k))

   do j = jy1 + 1, jy2 - 1
      do i = ix1 + 1, ix2 - 1
         !----------------------------------------------------
         !--------------2 phi gradients per face method------
         !----------------------------------------------------
         !        X - Location
         rPhiXE = 1./dx*(pf(i + 1, j, k) - pf(i, j, k))
         rPhiXW = 1./dx*(pf(i, j, k) - pf(i - 1, j, k))
         rPhiXN = 1./4./dx*((pf(i + 1, j + 1, k) - pf(i - 1, j + 1, k)) &
                            + (pf(i + 1, j, k) - pf(i - 1, j, k)))
         rPhiXS = 1./4./dx*((pf(i + 1, j, k) - pf(i - 1, j, k)) &
                            + (pf(i + 1, j - 1, k) - pf(i - 1, j - 1, k)))
         !        Y - Location
         rPhiYN = 1./dy*(pf(i, j + 1, k) - pf(i, j, k))
         rPhiYS = 1./dy*(pf(i, j, k) - pf(i, j - 1, k))
         rPhiYE = 1./4./dy*((pf(i + 1, j + 1, k) - pf(i + 1, j - 1, k)) &
                            + (pf(i, j + 1, k) - pf(i, j - 1, k)))
         rPhiYW = 1./4./dy*((pf(i, j + 1, k) - pf(i, j - 1, k)) &
                            + (pf(i - 1, j + 1, k) - pf(i - 1, j - 1, k)))
         !----------------------------------------------------

         !----Compute the magnitude of the gradient at each face
         rMagE = sqrt(rPhiXE**2.+rPhiYE**2.) + eps
         rMagW = sqrt(rPhiXW**2.+rPhiYW**2.) + eps
         rMagN = sqrt(rPhiXN**2.+rPhiYN**2.) + eps
         rMagS = sqrt(rPhiXS**2.+rPhiYS**2.) + eps

         crv(i, j, k) = 1./dx*(rPhiXE/rMagE - rPhiXW/rMagW) &
                        + 1./dy*(rPhiYN/rMagN - rPhiYS/rMagS)

         nmx(i, j, k) = 0.5*(rPhiXE + rPhiXW)
         nmy(i, j, k) = 0.5*(rPhiYN + rPhiYS)
         !----------------------------------------------------
      end do
   end do

   !--Need to loop through one guard cell on each side to set jumps
   !---when they cross block boundaries
   do j = jy1 + 1, jy2 - 1
      do i = ix1 + 1, ix2 - 1

         crvFace = 0.5*(crv(i, j, k) + crv(i + 1, j, k))
         nrmFace = 0.5*(nmx(i, j, k) + nmx(i + 1, j, k))
         sigx(i + 1, j, k) = sigx(i + 1, j, k) + 2*invWbr*crvFace*nrmFace/(rhoGas**2 - 1)

         crvFace = 0.5*(crv(i, j, k) + crv(i, j + 1, k))
         nrmFace = 0.5*(nmy(i, j, k) + nmy(i, j + 1, k))
         sigy(i, j + 1, k) = sigy(i, j + 1, k) + 2*invWbr*crvFace*nrmFace/(rhoGas**2 - 1)

      end do
   end do
end subroutine mph_setWeberJumps2d
