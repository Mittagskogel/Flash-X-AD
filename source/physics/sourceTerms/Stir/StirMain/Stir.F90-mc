!!****if* source/physics/sourceTerms/Stir/StirMain
!!
!! NAME
!!  Stir
!!
!! SYNOPSIS
!!  Stir(real(IN) :: dt,
!!       integer(IN), optional :: pass)
!!
!! DESCRIPTION
!!   Apply turbulence driving.
!!
!! ARGUMENTS
!!   dt   : current timestep
!!   pass : optional: dt-pass, in case of split solver
!!
!! AUTHOR
!!   Christoph Federrath, 2008-2023
!!
!!    (Aug 2013: added a write-out of the correction for the center-of-mass motion)
!!    (2012: added a pre-proc statement to treat the acceleration field as a force for testing; not the default)
!!    (2011/2012: added a write-out of the energy injection rate)
!!    (2017: added dynamic allocation of st_nmodes arrays)
!!    (2022: use of turbulence_generator C++ library/header, TurbGen.h)
!!    (2022: support for automatic amplitude adjustment)
!!    (2023: ported from FLASH4 to FLASH-X
!!
!!***

! make setup generate -mc file straight without looking for variants
!!NOVARIANTS

subroutine Stir(dt, pass)

  use Stir_data
  use Driver_data, ONLY : dr_nstep, dr_globalMe
  use Driver_interface, ONLY : Driver_getSimTime
  use Timers_interface, ONLY : Timers_start, Timers_stop
  use Grid_interface,   ONLY : Grid_getBlkCenterCoords
  use IO_data, ONLY : io_integralFreq
  @M iter_use

  implicit none

#include "constants.h"
#include "Simulation.h"
#include "Flashx_mpi.h"

  real, intent(in)              :: dt
  integer, intent(in), optional :: pass

  @M iter_declare(blkLimits, blkLimitsGC, grownLimits, Uin)
  integer :: level ! this should not be here as it is part of the macros
  logical, save              :: firstCall=.true., driving_stopped=.false.
  real, save                 :: last_time = HUGE(real(1.0))
  integer                    :: i, j, k, ii, jj, kk
  logical                    :: update_accel = .true.
  integer                    :: update_accel_int, error
  real, dimension(MDIM)      :: del, blockCenter ! MDIM is always 3
  real(kind=8)               :: pos_beg(MDIM), pos_end(MDIM)
  integer                    :: ncells(MDIM)
  real                       :: time, ekin_old, ekin_new, d_ekin
  real                       :: mass, momentum(MDIM), force(MDIM)
  real(kind=8)               :: v_turb(MDIM) ! turbulent velocity dispersion (for amplitude auto adjustment in TurbGen)

  integer, parameter :: funit = 22
  character(len=80)  :: outfile = "stir.dat"
  logical            :: check_for_io

  real(kind=8), dimension(7) :: locSumVars, globSumVars ! locally and globally summed variables
  real(kind=8) :: ekin_added, ekin_added_red, dvol, dmass, accel

! this is to determine whether we remove the average force and average momentum in every timestep
#define CORRECT_BULK_MOTION
#ifdef CORRECT_BULK_MOTION
  real(kind=8) :: correction
#else
  real(kind=8), parameter :: correction = 0.0
#endif

  logical, parameter :: Debug = .false.

  if (firstCall) then
    if (dr_globalMe == MASTER_PE) then
      open(funit, file=trim(outfile), position='APPEND') ! write header
      write(funit,'(13(1X,A16))') '[00]time', '[01]dt', '[02]d(Ekin)', '[03]d(Ekin)/dt', &
                                  '[04]xForce', '[05]yForce', '[06]zForce', &
                                  '[07]xMomentum', '[08]yMomentum', '[09]zMomentum', &
                                  '[10]xVturb', '[11]yVturb', '[12]zVturb'
      close(funit)
    endif
    firstCall = .false.
  endif

  ! =====================================================================

  if (Debug .and. (dr_globalMe .eq. MASTER_PE)) print *, 'Stir: entering'

  ! if not using stirring or stirring is turned off after some time (st_stop_driving_time), then return
  if ((.not. st_useStir) .or. driving_stopped) return

  call Driver_getSimTime(time)

  if (time .ge. st_stop_driving_time) then
    driving_stopped = .true.
    ! clear the acceleration field
    accx(:,:,:) = 0.0
    accy(:,:,:) = 0.0
    accz(:,:,:) = 0.0
#ifdef ACCX_VAR
    @M iter_all_begin(ALL_BLKS, .false., blkLimits, blkLimitsGC, del, Uin)
      Uin(ACCX_VAR,:,:,:) = 0.0
      Uin(ACCY_VAR,:,:,:) = 0.0
      Uin(ACCZ_VAR,:,:,:) = 0.0
    @M iter_end(Uin)
#endif
    if (dr_globalMe == MASTER_PE) print *, 'Stir: TURBULENCE DRIVING STOPPED!'
    return
  endif

  call Timers_start("Stir")

#ifdef CORRECT_BULK_MOTION

  ! local and global sum containers
  locSumVars (:) = 0.0
  globSumVars(:) = 0.0

  @M iter_all_begin(LEAF, .false., blkLimits, blkLimitsGC, del, Uin)

#if NDIM == 1
    dvol = del(IAXIS)
#endif
#if NDIM == 2
    dvol = del(IAXIS) * del(JAXIS)
#endif
#if NDIM == 3
    dvol = del(IAXIS) * del(JAXIS) * del(KAXIS)
#endif

    @M loop_3d(blkLimits)
      ! cell mass
      dmass = Uin(DENS_VAR,i,j,k)*dvol
      ! mass
      locSumVars(1) = locSumVars(1) + dmass
#ifdef VELX_VAR
      ! momentum x
      locSumVars(2) = locSumVars(2) + Uin(VELX_VAR,i,j,k)*dmass
      ! vx**2
      locSumVars(3) = locSumVars(3) + Uin(VELX_VAR,i,j,k)**2*dvol
#endif
#ifdef VELY_VAR
      ! momentum y
      locSumVars(4) = locSumVars(4) + Uin(VELY_VAR,i,j,k)*dmass
      ! vy**2
      locSumVars(5) = locSumVars(5) + Uin(VELY_VAR,i,j,k)**2*dvol
#endif
#ifdef VELZ_VAR
      ! momentum z
      locSumVars(6) = locSumVars(6) + Uin(VELZ_VAR,i,j,k)*dmass
      ! vz**2
      locSumVars(7) = locSumVars(7) + Uin(VELZ_VAR,i,j,k)**2*dvol
#endif

    @M loop_end_3d
  @M iter_end(Uin)

  ! now communicate all global summed quantities to all processors
  call MPI_AllReduce(locSumVars(1:7), globSumVars(1:7), 7, FLASH_DOUBLE, MPI_Sum, MPI_Comm_World, error)

  mass = globSumVars(1) ! gas mass
  momentum(1:3) = globSumVars(2:6:2) ! gas momentum
  ! turbulent velocity dispersion fort call to st_stir_check_for_update_of_turb_pattern_c
  v_turb(1:3) = sqrt( globSumVars(3:7:2) - (momentum(1:3)/mass)**2 + tiny(0.0) )

#else
  v_turb(1:3) = -1.0 ! no amplitude auto adjustment in this case
#endif
! ifdef CORRECT_BULK_MOTION

  ! check if we need to update the turbulent acceleration field
  update_accel = .false.
  call st_stir_check_for_update_of_turb_pattern_c(real(time,kind=8), update_accel_int, v_turb)
  if (update_accel_int .ne. 0) update_accel = .true.

#ifdef CORRECT_BULK_MOTION

  ! local and global sum containers
  locSumVars (:) = 0.0
  globSumVars(:) = 0.0

  ! sum quantities over list of blocks (to determine global mean force and momentum)
  @M iter_all_begin(LEAF, .false., blkLimits, blkLimitsGC, del, Uin)

#if NDIM == 1
    dvol = del(IAXIS)
#endif
#if NDIM == 2
    dvol = del(IAXIS) * del(JAXIS)
#endif
#if NDIM == 3
    dvol = del(IAXIS) * del(JAXIS) * del(KAXIS)
#endif

    ! update turbulent acceleration field, otherwise use previous acceleration field
    if (update_accel) then
      call Grid_getBlkCenterCoords(tileDesc, blockCenter)
      ncells = blkLimits(HIGH,:)-blkLimits(LOW,:)+1 ! number of active cells in (x,y,z)
      pos_beg = blockCenter - 0.5*ncells*del + del/2.0 ! first active cell coordinate in block (x,y,z)
      pos_end = blockCenter + 0.5*ncells*del - del/2.0 ! last  active cell coordinate in block (x,y,z)
      call st_stir_get_turb_vector_unigrid_c(pos_beg, pos_end, ncells, accx, accy, accz)
    endif

    @M loop_3d(blkLimits)

      kk = k-blkLimits(LOW,KAXIS)+1 ! z index of accx, accy, accz starts at 1 and goes to NZB
      jj = j-blkLimits(LOW,JAXIS)+1 ! y index of accx, accy, accz starts at 1 and goes to NYB
      ii = i-blkLimits(LOW,IAXIS)+1 ! x index of accx, accy, accz starts at 1 and goes to NXB
#ifdef ACCX_VAR
      ! if we use ACCX_VAR, ..Y, ..Z (usually when using AMR because of re-gridding), copy from accx, ..y, ..z
      if (update_accel) then
        Uin(ACCX_VAR,i,j,k) = accx(ii,jj,kk)
        Uin(ACCY_VAR,i,j,k) = accy(ii,jj,kk)
        Uin(ACCZ_VAR,i,j,k) = accz(ii,jj,kk)
      endif
#endif
      ! cell mass
      dmass = Uin(DENS_VAR,i,j,k)*dvol
      ! driving force
#ifdef ACCX_VAR
      locSumVars(1) = locSumVars(1) + Uin(ACCX_VAR,i,j,k)*dmass
#else
      locSumVars(1) = locSumVars(1) + accx(ii,jj,kk)*dmass
#endif
#ifdef ACCY_VAR
      locSumVars(2) = locSumVars(2) + Uin(ACCY_VAR,i,j,k)*dmass
#else
      locSumVars(2) = locSumVars(2) + accy(ii,jj,kk)*dmass
#endif
#ifdef ACCZ_VAR
      locSumVars(3) = locSumVars(3) + Uin(ACCZ_VAR,i,j,k)*dmass
#else
      locSumVars(3) = locSumVars(3) + accz(ii,jj,kk)*dmass
#endif

    @M loop_end_3d
  @M iter_end(Uin)

  ! now communicate all global summed quantities to all processors
  call MPI_AllReduce(locSumVars(1:3), globSumVars(1:3), 3, FLASH_DOUBLE, MPI_Sum, MPI_Comm_World, error)

  force(1:3) = globSumVars(1:3) ! driving force

#endif
! ifdef CORRECT_BULK_MOTION

  ! set to zero for adding block and cell contributions below
  ekin_added = 0.0

  ! Loop over local blocks again to actually apply the turbulent acceleration
  !! nullify (Uin)
  @M iter_all_begin(LEAF, .false., blkLimits, blkLimitsGC, del, Uin)

#if NDIM == 1
    dvol = del(IAXIS)
#endif
#if NDIM == 2
    dvol = del(IAXIS) * del(JAXIS)
#endif
#if NDIM == 3
    dvol = del(IAXIS) * del(JAXIS) * del(KAXIS)
#endif

! update acceleration if CORRECT_BULK_MOTION is not used (otherwise, st_get_turb_vector_unigrid_c was called above)
#ifndef CORRECT_BULK_MOTION
    ! update turbulent acceleration field, otherwise use previous acceleration field
    if (update_accel) then
      call Grid_getBlkCenterCoords(tileDesc, blockCenter)
      ncells = blkLimits(HIGH,:)-blkLimits(LOW,:)+1 ! number of active cells in (x,y,z)
      pos_beg = blockCenter - 0.5*ncells*del + del/2.0 ! first active cell coordinate in block (x,y,z)
      pos_end = blockCenter + 0.5*ncells*del - del/2.0 ! last  active cell coordinate in block (x,y,z)
      call st_stir_get_turb_vector_unigrid_c(pos_beg, pos_end, ncells, accx, accy, accz)
    endif
#endif
! ifndef CORRECT_BULK_MOTION

    @M loop_3d(blkLimits)

      kk = k-blkLimits(LOW,KAXIS)+1 ! z index of accx, accy, accz starts at 1 and goes to NZB
      jj = j-blkLimits(LOW,JAXIS)+1 ! y index of accx, accy, accz starts at 1 and goes to NYB
      ii = i-blkLimits(LOW,IAXIS)+1 ! x index of accx, accy, accz starts at 1 and goes to NXB

#ifndef CORRECT_BULK_MOTION
#ifdef ACCX_VAR
      ! if we use ACCX_VAR, ..Y, ..Z (usually when using AMR because of re-gridding), copy from accx, ..y, ..z
      if (update_accel) then
        Uin(ACCX_VAR,i,j,k) = accx(ii,jj,kk)
        Uin(ACCY_VAR,i,j,k) = accy(ii,jj,kk)
        Uin(ACCZ_VAR,i,j,k) = accz(ii,jj,kk)
      endif
#endif
#endif

#ifdef VELX_VAR
      ekin_old = 0.5*(Uin(VELX_VAR,i,j,k)**2+Uin(VELY_VAR,i,j,k)**2+Uin(VELZ_VAR,i,j,k)**2)
#endif

#ifdef VELX_VAR
#ifdef ACCX_VAR
      accel = Uin(ACCX_VAR,i,j,k)
#else
      accel = accx(ii,jj,kk)
#endif
#ifdef CORRECT_BULK_MOTION
      correction = force(1)/mass*dt + momentum(1)/mass
#endif
      Uin(VELX_VAR,i,j,k) = Uin(VELX_VAR,i,j,k) + accel*dt - correction
#endif

#ifdef VELY_VAR
#ifdef ACCY_VAR
      accel = Uin(ACCY_VAR,i,j,k)
#else
      accel = accy(ii,jj,kk)
#endif
#ifdef CORRECT_BULK_MOTION
      correction = force(2)/mass*dt + momentum(2)/mass
#endif
      Uin(VELY_VAR,i,j,k) = Uin(VELY_VAR,i,j,k) + accel*dt - correction
#endif

#ifdef VELZ_VAR
#ifdef ACCZ_VAR
      accel = Uin(ACCZ_VAR,i,j,k)
#else
      accel = accz(ii,jj,kk)
#endif
#ifdef CORRECT_BULK_MOTION
      correction = force(3)/mass*dt + momentum(3)/mass
#endif
      Uin(VELZ_VAR,i,j,k) = Uin(VELZ_VAR,i,j,k) + accel*dt - correction
#endif

#ifdef VELX_VAR
      ekin_new = 0.5*(Uin(VELX_VAR,i,j,k)**2+Uin(VELY_VAR,i,j,k)**2+Uin(VELZ_VAR,i,j,k)**2)
#endif
      ! compute energy injection
      d_ekin = ekin_new - ekin_old
#ifdef ENER_VAR
      ! update the total energy
      Uin(ENER_VAR,i,j,k) = Uin(ENER_VAR,i,j,k) + d_ekin
#endif
#ifdef EKIN_VAR
      ! update the kinetic energy
      Uin(EKIN_VAR,i,j,k) = Uin(EKIN_VAR,i,j,k) + d_ekin
#endif
#ifdef DENS_VAR
      ! add up total injected kinetic energy
      ekin_added = ekin_added + d_ekin * Uin(DENS_VAR,i,j,k) * dvol
#endif
#ifdef INJR_VAR
      ! fill kinetic energy injection rate d(0.5 rho v^2) / dt; note that rho=const here
      Uin(INJR_VAR,i,j,k) = d_ekin * Uin(DENS_VAR,i,j,k) / dt
#endif

    @M loop_end_3d
  @M iter_end(Uin)

  ! write time evolution of ekin_added to file
  if (io_integralFreq .gt. 0) then
    ! synchronise output frequency with IO_output's use of io_integralFreq
    check_for_io = .true.
    if (PRESENT(pass)) then
      if (pass .eq. 1) check_for_io = .false.
    endif
    if ((check_for_io) .and. (mod(dr_nstep+1, io_integralFreq) .eq. 0)) then
      if (abs(time - last_time) .gt. TINY(time)) then
        last_time = time
        ! sum up injected kinetic energy contributions from all blocks and processors
        ekin_added_red = 0.0
        call MPI_Reduce(ekin_added, ekin_added_red, 1, FLASH_DOUBLE, MPI_Sum, MASTER_PE, MPI_Comm_World, error)
        ekin_added = ekin_added_red
        ! only MASTER_PE writes
        if (dr_globalMe == MASTER_PE) then
          open(funit, file=trim(outfile), position='APPEND')
          write(funit,'(13(1X,ES16.9))') time, dt, ekin_added, ekin_added/dt, force(1:3), momentum(1:3), v_turb(1:3)
          close(funit)
        endif
      endif
    endif
  endif

  call Timers_stop ("Stir")

  if (Debug .and. (dr_globalMe .eq. MASTER_PE)) print *, 'Stir: exiting'

  return

end subroutine Stir
