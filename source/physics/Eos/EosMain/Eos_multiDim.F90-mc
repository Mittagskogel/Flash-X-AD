!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file
!> @ingroup physics_Eos
!!
!! @brief general implementation of the API call for a computing
!!     equation of state on cells in a multidimensional array
!! 
!! @subref{Eos_multiDim}
!!
!!

! solnData depends on the ordering on unk
!!VARIANTS(GPU): Eos_multiDim, &
!!               Eos_fillEosData, &
!!               Eos_getFromEosData, &
!!               Eos_vector, &
!!               Driver_abort
!!REORDER(4): solnData
!!

#include "Eos.h"
#include "constants.h"
#include "Simulation.h"

#define TRUNC_FROM 64
#define TRUNC_TO_E 0
#define TRUNC_TO_M 24

module truncate_Eos_multiDim
  implicit none
  interface
     function f__enzyme_truncate_mem_value(x, from, to_e, to_m) result(p_x) bind(c)
       use, intrinsic :: iso_c_binding, only: c_double, c_int
       implicit none

       ! double precision, intent(in) :: x
       ! integer, intent(in) :: from, to
       real(c_double), intent(in), value :: x
       integer(c_int), intent(in), value :: from, to_e, to_m
       double precision :: p_x
     end function f__enzyme_truncate_mem_value
  end interface

  interface
     function f__enzyme_expand_mem_value(x, from, to_e, to_m) result(p_x) bind(c)
       use, intrinsic :: iso_c_binding, only: c_double, c_int
       implicit none

       ! double precision, intent(in) :: x
       ! integer, intent(in) :: from, to
       real(c_double), intent(in), value :: x
       integer(c_int), intent(in), value :: from, to_e, to_m
       double precision :: p_x
     end function f__enzyme_expand_mem_value
  end interface

  public :: truncate_0d, truncate_1d, truncate_2d
contains
  subroutine truncate_1d(x)
    real, intent(inout) :: x(:)

    integer :: i, n
    n = size(x)

    do i=1,n
       x(i) = f__enzyme_truncate_mem_value(x(i), TRUNC_FROM, TRUNC_TO_E, TRUNC_TO_M)
    end do
  end subroutine truncate_1d

  subroutine truncate_0d(x)
    real, intent(inout) :: x
    real :: tmp(1)

    tmp(1) = x
    call truncate_1d(tmp)
    x = tmp(1)
  end subroutine truncate_0d

  subroutine truncate_2d(x)
    real, intent(inout) :: x(:, :)
    real :: tmp(size(x))

    tmp = reshape(x, [size(x)])
    call truncate_1d(tmp)
    x = reshape(tmp, [size(x, 1), size(x, 2)])
  end subroutine truncate_2d
end module truncate_Eos_multiDim

subroutine Eos_multiDim(mode,range,lo,solnData @M eos_scratchArgs)

  use Driver_interface, ONLY : Driver_abort
  use Eos_interface, ONLY : Eos_fillEosData, Eos_getFromEosData, Eos_vector

  ! Enzyme truncate Eos functions
  use truncate_Eos_multiDim
  use Eos_data, only: eos_truncate

  @M eos_DIR_routine(vector)

  @M eos_DIR_routine_none(Driver_abort)
  @M eos_DIR_routine_vector(Eos_fillEosData)
  @M eos_DIR_routine_vector(Eos_vector)
  @M eos_DIR_routine_vector(Eos_getFromEosData)

#include "FortranLangFeatures.fh"

  integer, intent(in) :: mode
  integer, dimension(2,MDIM), intent(in) :: range
  integer, intent(in) :: lo(MDIM)
  real,dimension(1:,lo(1):,lo(2):,lo(3):),intent(inout) :: solnData
  !!real,dimension(:,:,:,:), pointer :: solnData		
  integer :: ierr
  integer :: i,j,k, vecLen
  integer :: ilo, ihi, jlo, jhi, klo, khi, base_n
  @M eos_scratch_args_declare

  integer :: n,m
  real :: @M eos_args
  @M eos_scratch_declare

  @M eos_debug
  if (mode==MODE_EOS_NOP) return ! * Return immediately for MODE_EOS_NOP! *

  vecLen = (range(HIGH,IAXIS)-range(LOW,IAXIS)+1)*&
           (range(HIGH,JAXIS)-range(LOW,JAXIS)+1)*&
           (range(HIGH,KAXIS)-range(LOW,KAXIS)+1)

  if (vecLen==0) return ! * Return immediately for empty IAXIS range! (for efficiency and avoiding index range errors)

  ! solnData points to solution data in UNK (or other data structure).
  ! The length of the data being operated upon is determined from the range input array.

  @M eos_scratch_alloc
  
  print *, "---- Eos_fillEosData"
  call Eos_fillEosData(range, lo, solnData,1, vecLen, eosData)
  print *, "---- Eos_fillEosData done"
  base_n = 0
  !! for readability
  ilo = range(LOW,  IAXIS)
  ihi = range(HIGH, IAXIS)
  jlo = range(LOW,  JAXIS)
  jhi = range(HIGH, JAXIS)
  klo = range(LOW,  KAXIS)
  khi = range(HIGH, KAXIS)
  @M eos_DIR_parallel_loop(3) &
  @M eos_DIR_private([i, j, k, n])
  @M loop_3d(range,i,j,k)
             n = base_n + &
                 ((k - klo) * (jhi - jlo + 1) * (ihi - ilo + 1)) + &
                 ((j - jlo) * (ihi - ilo + 1)) + &
                 (i - ilo) + 1
             massFrac(1:NSPECIES,n) = solnData(SPECIES_BEGIN:SPECIES_END,i,j,k)
  @M loop_end_3d   
  if (eos_truncate) then
     print *, "Eos_multidim in truncated section!"
     call truncate_2d(eosData)
  endif
  print *, "---- Eos_vector"
  call Eos_vector(mode,vecLen,eosData, massFrac)
  print *, "---- Eos_getFromEosData"
  call Eos_getFromEosData(1, vecLen, eosData, range, lo, solnData)

  @M eos_scratch_dealloc
  
end subroutine Eos_multiDim
