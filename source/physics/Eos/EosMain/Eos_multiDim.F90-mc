!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file
!> @ingroup physics_Eos
!!
!! @brief Main implementation of the API call for a computing
!!     equation of state on cells in a multidimensional array
!! 
!! @subref{Eos_multiDim}
!!
!!

! solnData depends on the ordering on unk
!!REORDER(4): solnData
!!NOVARIANTS

#include "Eos.h"
#include "constants.h"
#include "Simulation.h"
#ifdef DEBUG_ALL
#define DEBUG
#endif

subroutine Eos_multiDim(mode,range,solnData)

  use Driver_interface, ONLY : Driver_abort
  use Logfile_interface, ONLY: Logfile_stampMessage 
  use Eos_interface, ONLY : Eos
  use Eos_data, ONLY : eos_threadWithinBlock,eos_eintSwitch, eos_smalle, eos_mapLookup
  use eos_localInterface, ONLY : eos_idealGamma, eos_helmSpecies
  implicit none

#include "FortranLangFeatures.fh"

  integer, intent(in) :: mode
  integer, dimension(2,MDIM), intent(in) :: range
  real, POINTER_INTENT_IN :: solnData(:,:,:,:)

  real,dimension(EOS_VARS+1:EOS_NUM) :: derivs

  integer :: ierr, gridDataStruct
  integer :: i,j,k, m
  real :: ekin, @M eos_args
  integer :: pres_map,dens_map,gamc_map,game_map,temp_map,entr_map
  integer :: eint_map,ener_map, velx_map, vely_map, velz_map, sumy_map, ye_map
  real :: kineticEnergy, internalEnergy
  real, dimension(NSPECIES) :: massFrac

!! ---------------------------------------------------------------------------------
  ! Test calling arguments
#ifdef DEBUG
  @M eos_debug
#endif
  
  if (mode==MODE_EOS_NOP) return ! * Return immediately for MODE_EOS_NOP! *

  gridDataStruct=CENTER
  @M eos_map  

  if(NSPECIES > 1) then
     @M loop_3d(range)
           massFrac(1:NSPECIES) = solnData(SPECIES_BEGIN:SPECIES_END,i,j,k)
           @M eos_preprocess
           @M eos_idealGamma_massFrac
           @M eos_helmSpecies_massFrac
           @M eos_postprocess
     @M loop_end_3d
  else
     @M loop_3d(range)
           @M eos_preprocess
           @M eos_idealGamma
           @M eos_helmSpecies
           @M eos_postprocess
     @M loop_end_3d
  end if


  return
end subroutine Eos_multiDim
