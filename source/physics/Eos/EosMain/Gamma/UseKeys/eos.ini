[eos_gamma_dens_ei]
definition =
     ggprodinv = 1. / ggprod
     gam1inv   = 1. / eos_gammam1
     eosData(pres+ilo:pres+ihi) = eosData(dens+ilo:dens+ihi) * &
                                    eosData(eint+ilo:eint+ihi) * gam1inv
     eosData(temp+ilo:temp+ihi) = eosData(eint+ilo:eint+ihi) * ggprodinv * &
                                    eosData(abar+ilo:abar+ihi)
     eosData(entr+ilo:entr+ihi) = (eosData(pres+ilo:pres+ihi)/eosData(dens+ilo:dens+ihi) +  &
             &  eosData(eint+ilo:eint+ihi))/eosData(temp+ilo:temp+ihi)

[eos_gamma_dens_pres]
definition =
     ggprodinv = 1. / ggprod
     gam1inv   = 1. / eos_gammam1
     eosData(eint+ilo:eint+ihi) = eosData(pres+ilo:pres+ihi) * eos_gammam1 / &
                                   eosData(dens+ilo:dens+ihi)
     eosData(temp+ilo:temp+ihi) = eosData(eint+ilo:eint+ihi) * ggprodinv * &
                                   eosData(abar+ilo:abar+ihi)
     eosData(entr+ilo:entr+ihi) = (eosData(pres+ilo:pres+ihi)/eosData(dens+ilo:dens+ihi) +  &
             &  eosData(eint+ilo:eint+ihi))/eosData(temp+ilo:temp+ihi)

[eos_gamma_dens_temp]
definition = 
     eosData(pres+ilo:pres+ihi) = eos_gasConstant*eosData(dens+ilo:dens+ihi) * &
                                 eosData(temp+ilo:temp+ihi) / eosData(abar+ilo:abar+ihi)
     eosData(eint+ilo:eint+ihi) = ggprod * eosData(temp+ilo:temp+ihi) &
                                 / eosData(abar+ilo:abar+ihi)
     eosData(entr+ilo:entr+ihi) = (eosData(pres+ilo:pres+ihi)/eosData(dens+ilo:dens+ihi) +  &
             &  eosData(eint+ilo:eint+ihi))/eosData(temp+ilo:temp+ihi) 

[eos_dens_ei]
definition =
     ggprodinv = 1. / ggprod
     gam1inv   = 1. / eos_gammam1
     @MACRO loop_3d(range)
     @MACRO eos_check
     Uin(PRES_VAR,i,j,k) = Uin(DENS_VAR,i,j,k) * &
                                    Uin(EINT_VAR,i,j,k) * gam1inv
     Uin(TEMP_VAR,i,j,k) = Uin(EINT_VAR,i,j,k) * ggprodinv * abar
 #ifdef ENTR_VAR
     Uin(ENTR_VAR,i,j,k) = (Uin(PRES_VAR,i,j,k)/Uin(DENS_VAR,i,j,k) +  &
             &  Uin(EINT_VAR,i,j,k))/Uin(TEMP_VAR,i,j,k)
 #endif	    
     @MACRO loop_end_3d

[eos_dens_pres]
definition =
     ggprodinv = 1. / ggprod
     gam1inv   = 1. / eos_gammam1
     @MACRO loop_3d(range)
     @MACRO eos_check
     Uin(EINT_VAR,i,j,k) = Uin(PRES_VAR,i,j,k) * eos_gammam1 / &
                                   Uin(DENS_VAR,i,j,k)
     Uin(TEMP_VAR,i,j,k) = Uin(EINT_VAR,i,j,k) * ggprodinv * abar
 #ifdef ENTR_VAR
     Uin(ENTR_VAR,i,j,k) = (Uin(PRES_VAR,i,j,k)/Uin(DENS_VAR,i,j,k) +  &
             &  Uin(EINT_VAR,i,j,k))/Uin(TEMP_VAR,i,j,k)
 #endif	     
     @MACRO loop_end_3d
     
[eos_dens_temp]
definition =
     @MACRO loop_3d(range)     
     @MACRO eos_check
     Uin(PRES_VAR,i,j,k) = eos_gasConstant*Uin(DENS_VAR,i,j,k) * &
                                 Uin(TEMP_VAR,i,j,k) / abar
     Uin(EINT_VAR,i,j,k) = ggprod * Uin(TEMP_VAR,i,j,k) / abar
 #ifdef ENTR_VAR     
     Uin(ENTR_VAR,i,j,k) = (Uin(PRES_VAR,i,j,k)/Uin(DENS_VAR,i,j,k) +  &
             &  Uin(EINT_VAR,i,j,k))/Uin(TEMP_VAR,i,j,k)
 #endif	     
     @MACRO loop_end_3d


[eos_direct]
definition =
     if (mode == MODE_DENS_TEMP) then
        @MACRO eos_dens_temp
     ! density, internal energy taken as input
     elseif (mode == MODE_DENS_EI) then
        @MACRO eos_dens_ei
     ! density, pressure taken as input
     elseif (mode == MODE_DENS_PRES) then
        @MACRO eos_dens_pres
  ! unrecognized value for mode
     else
        call Driver_abortFlash("[Eos] Unrecognized input mode given to Eos")
     endif
