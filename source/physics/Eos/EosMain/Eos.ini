

[eos_idealGammaInit]
definition = 


[eos_helmSpeciesInit]
definition = 

[eos_starKillerInit]
definition = 

[eos_weaklibInit]
definition = 

[eos_hybridInit]
definition = 


[eos_idealGamma]
definition = 

[eos_multiGamma]
definition = 

[eos_helmSpecies]
definition = 

[eos_helmYe]
definition = 

[eos_starKiller]
definition = 

[eos_weaklib]
definition = 

[eos_hybrid]
definition = 

[eos_basic]
definition =
 pres,dens,gamc,temp,abar,zbar,eint,ekin,entr

[eos_map]
definition =
  pres_map = PRES_VAR
  dens_map = DENS_VAR
  temp_map = TEMP_VAR
  gamc_map = GAMC_VAR
  game_map = NONEXISTENT
  eint_map = NONEXISTENT
  ener_map = NONEXISTENT
  velx_map = NONEXISTENT
  vely_map = NONEXISTENT
  velz_map = NONEXISTENT
  sumy_map = NONEXISTENT
  ye_map   = NONEXISTENT
  entr_map = NONEXISTENT
 #ifdef GAME_VAR 
  game_map = GAME_VAR
 #endif
 #ifdef EINT_VAR
  eint_map = EINT_VAR
 #endif
 #ifdef ENER_VAR
  ener_map = ENER_VAR
 #endif
 #ifdef VELX_VAR
  velx_map = VELX_VAR
 #endif
 #ifdef VELY_VAR
  vely_map = VELY_VAR
 #endif
 #ifdef VELZ_VAR
  velz_map = VELZ_VAR
 #endif
 #ifdef SUMY_VAR
  sumy_map = SUMY_VAR
 #endif
 #ifdef YE_VAR
  ye_map   = YE_VAR
 #endif
 #ifdef ENTR_VAR
  entr_map = ENTR_VAR
 #endif


[eos_preprocess]
definition =
  if (velx_map > 0 .AND. vely_map > 0 .AND. velz_map > 0) then
              kineticEnergy  = 0.5*(solnData(velx_map,i,j,k)**2 + &
                                    solnData(vely_map,i,j,k)**2 + &
                                    solnData(velz_map,i,j,k)**2)
           else
              kineticEnergy = 0.0
           end if
           rekin = kineticEnergy
           !! kineticEnergy holds velocity vector information -- 1/2 * Vmag**2
           !! internalEnergy holds eint (directly)  or energyTotal - ekinetic (calculated),
           !!          depending upon eintSwitch
           if(eint_map /= NONEXISTENT) then
              internalEnergy  = solnData(eint_map,i,j,k)
              if(ener_map /= NONEXISTENT) then
                 if ( solnData(ener_map,i,j,k) - kineticEnergy > max(eos_smalle, eos_eintSwitch*kineticEnergy)) then
                    internalEnergy = solnData(ener_map,i,j,k) - kineticEnergy
                 end if
              end if
           else if(game_map /= NONEXISTENT) then ! This case should be usable for R(elativistic)HD - KW
              internalEnergy  = solnData(pres_map,i,j,k) / solnData(dens_map,i,j,k) / &
                                   (solnData(game_map,i,j,k) - 1.0)
              if(ener_map /= NONEXISTENT) then
                 if ( solnData(ener_map,i,j,k) - kineticEnergy > max(eos_smalle, eos_eintSwitch*kineticEnergy)) then
                    internalEnergy = solnData(ener_map,i,j,k) - kineticEnergy
                 end if
              end if
           else if(ener_map /= NONEXISTENT) then
              internalEnergy = solnData(ener_map,i,j,k)-kineticEnergy
           else
              internalEnergy = eos_smalle
           endif
           
           internalEnergy = max(internalEnergy, eos_smalle)
           reint = internalEnergy
           
           rpres = solnData(pres_map,i,j,k)
           rdens = solnData(dens_map,i,j,k)
           rtemp = solnData(temp_map,i,j,k)
           rgamc = solnData(gamc_map,i,j,k)
           if((ye_map /= NONEXISTENT).and.(sumy_map /= NONEXISTENT)) then
              !! cal says abar=1/sumy
              !! cal says zbar=ye / sumy and he claims sumy are never zero
              rabar =  1.0 /  solnData(sumy_map,i,j,k)
              rzbar = solnData(ye_map,i,j,k) /  solnData(sumy_map,i,j,k)
           endif
           if(entr_map /= NONEXISTENT) rentr = solnData(entr_map,i,j,k)

[eos_postProcess]
definition =
  solnData(pres_map,i,j,k) = pres
  solnData(temp_map,i,j,k) = temp
  solnData(gamc_map,i,j,k) = gamc
  if(eint_map /= NONEXISTENT)solnData(eint_map,i,j,k) =eint
  if(ener_map /= NONEXISTENT)solnData(ener_map,i,j,k) = eint + ekin
  if(entr_map /= NONEXISTENT)solnData(entr_map,i,j,k) = entr
  if(game_map /= NONEXISTENT)solnData(game_map,i,j,k) = pres/(eint *dens) +1