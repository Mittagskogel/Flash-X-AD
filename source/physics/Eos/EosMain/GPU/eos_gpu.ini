

[eos_scratch_args_declare]
definition=
    real,dimension(:,:),intent(inout) ::eosData, massFrac

[eos_scratch_declare]
definition=

[eos_scratch_alloc]
definition=

[eos_scratch_dealloc]
definition=


[eos_scratchArgs]
definition=
    ,eosData, massFrac


[Eos_multidim_name]
definition=
   Eos_multidim_GPU

[Eos_vector_name]
definition=
   Eos_vector_GPU

[Eos_name]
definition=
   Eos_GPU

[Eos_fillEosData_name]
definition=
  Eos_fillEosData_GPU

[Eos_getFromEosData_name]
definition=
   Eos_getFromEosData_GPU

[Eos_multiDim_GPU_interface]
definition=
  interface
     subroutine Eos_multiDim_GPU(mode,range,lo,solnData)
       integer, intent(in) :: mode
       integer, dimension(LOW:HIGH,MDIM), intent(in) :: range
       integer, intent(in) :: lo(MDIM)
       real,dimension(1:,lo(1):,lo(2):,lo(3):),intent(inout) :: solnData(:,:,:,:)
       !!real,dimension(:,:,:,:), pointer :: solnData
     end subroutine Eos_multiDim_GPU
  end interface


[Eos_fillEosData_GPU_interface]
definition=
  interface 
     subroutine Eos_fillEosData_GPU(range,lo, solnData, vecB, vecE, eosData)
       integer, dimension(LOW:HIGH,MDIM), intent(in) :: range
       integer, intent(in) :: vecB
       integer, intent(inout) :: vecE
       integer, intent(in) :: lo(MDIM)
       real,dimension(1:,lo(1):,lo(2):,lo(3):),intent(inout) :: solnData
       real, dimension(vecB:vecE,EOS_VARS), intent(out) :: eosData
     end subroutine Eos_fillEosData_GPU
  end interface


[Eos_getFromEosData_GPU_interface]
definition=
  interface 
     subroutine Eos_getFromEosData_GPU( vecB, vecE, eosData, range, lo, solnData)
       integer, intent(in) :: vecB
       integer,intent(inout) :: vecE
       integer, dimension(LOW:HIGH,MDIM), intent(in) :: range
       real, dimension(vecB:vecE,EOS_VARS),intent(in) :: eosData
       integer, dimension(MDIM) :: lo
       real,dimension(1:,lo(1):,lo(2):,lo(3):), intent(inout) :: solnData
       !!real,dimension(:,:,:,:), pointer :: solnData
     end subroutine Eos_getFromEosData_GPU
  end interface

 
[Eos_GPU_interface]
definition=
  interface
     subroutine Eos_GPU(mode,  @M eos_args, massFrac, derivs)
       integer, INTENT(in) :: mode
       real, INTENT(INOUT) :: @M eos_args
       real, optional, INTENT(in),dimension(NSPECIES)    :: massFrac
       real, optional, INTENT(out),dimension(EOS_VARS+1:EOS_NUM) :: derivs
     end subroutine Eos_GPU
  end interface

[Eos_vector_GPU_interface]
definition=
  interface	
     subroutine Eos_vector_GPU(mode, vecLen, eosData,  massFrac, derivs)
       integer, INTENT(in) :: mode,vecLen
       real, intent(INOUT),dimension(vecLen,EOS_VARS) :: eosData
       real, optional, INTENT(in),dimension(vecLen,NSPECIES)    :: massFrac
       real, optional, INTENT(out),dimension(vecLen,EOS_VARS+1:EOS_NUM) :: derivs
     end subroutine Eos_Vector_GPU
  end interface

