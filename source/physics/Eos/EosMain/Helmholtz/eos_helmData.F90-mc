!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file
!> @ingroup physics_Eos
!!
!! @brief  General parameters (non-array) for EOS Helmholtz
!!

!!NOVARIANTS

module eos_helmData

  implicit none

#include "constants.h"
#include "Simulation.h"
#include "Eos.h"
#include "Eos_map.h"
#include "Eos_helm.h"

  ! maximum number of iterations for the Newton loop to find T from e
  integer, save :: eos_maxNewton
 
  ! how accurately to do the Newton iteration to get T from e
  real, save :: eos_tol
  
  real, save :: eos_larget
  

  real, save :: eos_fluffDens

  integer,save :: eos_hfetInit

  ! force the iterative solver to leave inputs alone (always true in MODE_DENS_TEMP)
  logical, save :: eos_forceConstantInput

  ! Coulomb multiplier 
  real, save :: eos_coulombMult
  ! abort if pressures become negative
  logical, save :: eos_coulombAbort
 
  logical, save :: eos_useMultiSpecies
  ! integer,parameter :: EOSIMAX=541,EOSJMAX=201

  ! Minimum vecLen value to use OpenACC implementation of starkiller
  integer, save :: eos_vecLenACC

  real, save :: eos_tlo, eos_thi, eos_tstpi
  real, save :: eos_dlo, eos_dhi, eos_dstpi
  integer, parameter :: eos_t=1,eos_dt=2,eos_dtSqr=3,eos_dtInv=4,eos_dtSqrInv=5
  integer, parameter :: eos_d=1, eos_dd=2,eos_ddSqr=3,eos_ddInv=4,eos_ddSqrInv=5
  real,dimension(EOSJMAX,5),save :: eos_temps
  real,dimension(EOSIMAX,5),save :: eos_rhos
!..for the helmholtz free energy tables
!..for the pressure derivative with density tables
!..for the chemical potential tables
  !..for the number density tables
  ! integer, parameter :: EOST = 22, EOST_END=27
  real,save,dimension(EOSIMAX,EOSJMAX,EOST_END) :: eos_table
  integer, parameter:: eos_f=1,eos_fd=2,eos_ft=3,eos_fdd=4,&
             eos_ftt=5,eos_fdt=6,eos_fddt=7,eos_fdtt=8,eos_fddtt=9, & 
             eos_dpdf=10,eos_dpdfd=11,eos_dpdft=12,eos_dpdfdt=13, & 
             eos_ef=14,eos_efd=15,eos_eft=16,eos_efdt=17, & 
             eos_xf=18,eos_xfd=19,eos_xft=20,eos_xfdt=21
  integer, parameter :: eos_dpdfdd=22,eos_dpdftt=23,eos_efdd=24,eos_eftt=25,&
             eos_xfdd=26,eos_xftt=27

  logical, save :: eos_baprox13 = .false. 

  real, save :: eos_msA(NSPECIES), eos_msZ(NSPECIES)


  @M eos_helm_DIR_declare_data([eos_tol, eos_maxNewton, eos_coulombMult, eos_coulombAbort])
  @M eos_helm_DIR_declare_data([eos_useMultiSpecies, eos_forceConstantInput])
  @M eos_helm_DIR_declare_data([eos_tlo, eos_thi, eos_tstpi, eos_dlo, eos_dhi, eos_dstpi])
  @M eos_helm_DIR_declare_data([eos_table, eos_temps, eos_rhos, eos_type])

  @M eos_helm_DIR_declare_data([eos_t, eos_dt, eos_dtSqr, eos_dtInv, eos_dtSqrInv])
  @M eos_helm_DIR_declare_data([eos_d, eos_dd, eos_ddSqr, eos_ddInv, eos_ddSqrInv])

  @M eos_helm_DIR_declare_data([eos_f, eos_fd, eos_ft, eos_fdd])
  @M eos_helm_DIR_declare_data([eos_ftt, eos_fdt, eos_fddt, eos_fdtt, eos_fddtt])
  @M eos_helm_DIR_declare_data([eos_dpdf, eos_dpdfd, eos_dpdft, eos_dpdfdt])
  @M eos_helm_DIR_declare_data([eos_ef, eos_efd, eos_eft, eos_efdt])
  @M eos_helm_DIR_declare_data([eos_xf, eos_xfd, eos_xft, eos_xfdt])
  @M eos_helm_DIR_declare_data([eos_dpdfdd, eos_dpdftt, eos_efdd, eos_eftt, eos_xfdd, eos_xftt])

  @M eos_helm_DIR_declare_data([eos_baprox13])

  @M eos_helm_DIR_declare_data([eos_msA, eos_msZ])


end module eos_helmData
