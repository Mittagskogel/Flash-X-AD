!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!! @brief Computes interfacial fluxes through reconstruction and solving Riemann
!!
!! @details
!! The reconstruction method and Riemann Solver are implemented as macros,
!! so one can implement new reconstruction/Riemann solver by redefining
!! corresponding macros.
!!
!! @note
!! The index limits are determined by the input paramters @p limits and @p stage
!!
!! @param stage           Current RK stage
!! @param starState       Input solution data
!! @param flat3d          Flattening limiter
!! @param fl[x,y,z]       Output fluxes in [X,Y,Z] direction
!! @param limits          Index limits for each RK stages for updating solution
!! @param deltas          dx, dy, dz
!! @param scr_rope        Scratch space for saving input solution data
!! @param scr_flux        Scratch space for saving output flux data
!! @param scr_uPlus       Scratch space for saving Riemann state at plus (+) side
!! @param scr_uMinus      Scratch space for saving Riemann state at minus (-) side
!! @param loGC            Lower indices including guard cells
!<

!!VARIANTS(GPU): hy_rk_getFaceFlux
!!Reorder(4):starState,fl[xyz]
!!Reorder(4):scr_rope,scr_flux,scr_uPlus,scr_uMinus

module truncate_helpers
  implicit none
  interface
     function f_enzyme_reset_shadow_trace() result(count) bind(c)
       use, intrinsic :: iso_c_binding, only: c_long_long
       implicit none

       integer(c_long_long) :: count
     end function f_enzyme_reset_shadow_trace
  end interface
end module truncate_helpers

subroutine hy_rk_getFaceFlux (stage, starState, flat3d, flx, fly, flz, &
                              limits, deltas, &
                              scr_rope, scr_flux, scr_uPlus, scr_uMinus, &
                              loGC)

  use Hydro_data, ONLY : hy_threadWithinBlock, &
                         hybridRiemann => hy_hybridRiemann, &
                         cvisc => hy_cvisc, &
                         C_hyp => hy_C_hyp, &
                         tinyZero => hy_tiny, &
                         smalld => hy_smalldens, &
                         smallp => hy_smallpres, &
                         smallx => hy_smallX, &
                         limRad => hy_limRad, &
                         mp5ZeroTol => hy_mp5ZeroTol

  ! Enzyme
  use truncate_helpers

  implicit none

  @M hy_DIR_TARGET_routine(vector)

#include "Simulation.h"
#include "constants.h"
#include "Spark.h"

  integer, intent(IN) :: stage, loGC(3)
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN) :: starState
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(OUT) :: flx, fly, flz
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(OUT) :: scr_rope, scr_flux, scr_uPlus, scr_uMinus
  real, dimension(loGC(1):, loGC(2):, loGC(3):), intent(IN) :: flat3d
  integer, dimension(LOW:HIGH, MDIM, MAXSTAGE), intent(IN) :: limits
  real, dimension(MDIM), intent(IN)  :: deltas

  integer :: i, j, k, s, n, v, dir, ierr
  integer :: ii, jj, kk, is, js, ks
  real :: avisc, VenerLo, VenerHi
  real :: spcSumInv
  real, dimension(NSPECIES) :: spc
  real  :: u2, E, B2, UB, Ptot

  logical :: inShock
  @M hy_recon_declare
  @M hy_riemann_declare

  logical :: offload = .false.

  ! Enzyme
  integer :: err_tmp

#ifdef OMP_OL
  offload = .true.
#endif

  @M hy_DIR_parallel_loop(3) &
  @M hy_DIR_shared([limits, scr_rope, starState])
  do k = limits(LOW,KAXIS,stage)-NSTENCIL*K3D, limits(HIGH,KAXIS,stage)+NSTENCIL*K3D
  do j = limits(LOW,JAXIS,stage)-NSTENCIL*K2D, limits(HIGH,JAXIS,stage)+NSTENCIL*K2D
  do i = limits(LOW,IAXIS,stage)-NSTENCIL, limits(HIGH,IAXIS,stage)+NSTENCIL
     scr_rope(HY_DENS,i,j,k) = starState(DENS_VAR,i,j,k)
     scr_rope(HY_VELX,i,j,k) = starState(VELX_VAR,i,j,k)
     scr_rope(HY_VELY,i,j,k) = starState(VELY_VAR,i,j,k)
     scr_rope(HY_VELZ,i,j,k) = starState(VELZ_VAR,i,j,k)
     scr_rope(HY_PRES,i,j,k) = starState(PRES_VAR,i,j,k)
     scr_rope(HY_GAMC,i,j,k) = starState(GAMC_VAR,i,j,k)
     scr_rope(HY_RHOE,i,j,k) = starState(DENS_VAR,i,j,k)*starState(EINT_VAR,i,j,k)
#ifdef SPARK_GLM
     scr_rope(HY_MAGX,i,j,k) = starState(MAGX_VAR,i,j,k)
     scr_rope(HY_MAGY,i,j,k) = starState(MAGY_VAR,i,j,k)
     scr_rope(HY_MAGZ,i,j,k) = starState(MAGZ_VAR,i,j,k)
     scr_rope(HY_PSIB,i,j,k) = starState(PSIB_VAR,i,j,k)
#endif
#if NSPECIES+NMASS_SCALARS>0
     do n=SPECIES_BEGIN, MASS_SCALARS_END
        scr_rope(HY_NUM_VARS+1+n-SPECIES_BEGIN,i,j,k) = starState(n,i,j,k)
     enddo
#endif
  enddo
  enddo
  enddo

  !  Begin loop over zones
  do dir = 1, NDIM
     select case(dir)
     case(IAXIS)
        is=1; js=0; ks=0
     case(JAXIS)
        is=0; js=1; ks=0
     case(KAXIS)
        is=0; js=0; ks=1
     end select

     ! call Timers_start("recon")
     @M hy_DIR_parallel_loop(3) &
     @M hy_DIR_recon_shared &
     @M hy_DIR_shared([limits, scr_rope, scr_uMinus, scr_uPlus, flat3d]) &
     @M hy_DIR_recon_private &
     @M hy_DIR_private([stencil]) &
     @M hy_DIR_firstprivate([is, js, ks])
     do k = limits(LOW,KAXIS,stage)-1*ks, limits(HIGH,KAXIS,stage)+1*ks
     do j = limits(LOW,JAXIS,stage)-1*js, limits(HIGH,JAXIS,stage)+1*js
     do i = limits(LOW,IAXIS,stage)-1*is, limits(HIGH,IAXIS,stage)+1*is
        do v=1,NRECON
           call hy_recon(scr_rope, scr_uPlus, scr_uMinus, loGC, is, js, ks, i,j,k,v)
        enddo
     enddo
     enddo
     enddo
     ! call Timers_stop("recon")

     ! call Timers_start("setrem")
     @M hy_DIR_parallel_loop(3) &
     @M hy_DIR_shared([limits, scr_uPlus, scr_uMinus]) &
     @M hy_DIR_private([s, spc, spcSumInv]) &
     @M hy_DIR_firstprivate([smalld, smallp, smallx]) &
     @M hy_DIR_firstprivate([is, js, ks])
     do k = limits(LOW,KAXIS,stage)-1*ks, limits(HIGH,KAXIS,stage)+1*ks
     do j = limits(LOW,JAXIS,stage)-1*js, limits(HIGH,JAXIS,stage)+1*js
     do i = limits(LOW,IAXIS,stage)-1*is, limits(HIGH,IAXIS,stage)+1*is
        ! Limit and renormalize the species.
        @M hy_normalize_species( scr_uPlus )
        @M hy_normalize_species( scr_uMinus )
     enddo
     enddo
     enddo
     ! call Timers_stop("setrem")

     ! call Timers_start("riemann")
     @M hy_DIR_parallel_loop(3) &
     @M hy_DIR_riemann_shared &
     @M hy_DIR_shared([limits, starState, scr_rope, scr_flux, scr_uMinus, scr_uPlus]) &
     @M hy_DIR_riemann_private &
     @M hy_DIR_firstprivate([dir, tinyZero, hybridRiemann]) &
     @M hy_DIR_firstprivate([is, js, ks])
     do k = limits(LOW,KAXIS,stage), limits(HIGH,KAXIS,stage)+1*ks
     do j = limits(LOW,JAXIS,stage), limits(HIGH,JAXIS,stage)+1*js
     do i = limits(LOW,IAXIS,stage), limits(HIGH,IAXIS,stage)+1*is
        ! err_tmp = f_enzyme_reset_shadow_trace()
        VL = scr_uPlus(1:HY_NUM_VARS,i-is,j-js,k-ks)
        VR = scr_uMinus(1:HY_NUM_VARS,i,j,k)
        inShock = .false.
#ifdef SHOK_VAR
        inShock = any(starState(SHOK_VAR,i-1*is:i,j-1*js:j,k-1*ks:k) /= 0.0)
#endif
        @M hy_riemann
        scr_flux(1:HY_NUM_FLUX,i,j,k) = Fstar(1:HY_NUM_FLUX)
        ! print *, err_tmp, "errors after reset,", &
        !      "inShock =", inShock, "and", &
        !      f_enzyme_reset_shadow_trace(), "errors in hy_rk_getFaceFlux.F90"
     enddo
     enddo
     enddo
     ! call Timers_stop("riemann")

     ! call Timers_start("avisc")
     @M hy_DIR_parallel_loop(3) &
     @M hy_DIR_shared([limits, scr_rope, scr_flux, scr_uPlus, scr_uMinus]) &
     @M hy_DIR_private([avisc, VenerLo, VenerHi]) &
     @M hy_DIR_firstprivate([dir, cvisc]) &
     @M hy_DIR_firstprivate([is, js, ks])
     do k = limits(LOW,KAXIS,stage), limits(HIGH,KAXIS,stage)+1*ks
     do j = limits(LOW,JAXIS,stage), limits(HIGH,JAXIS,stage)+1*js
     do i = limits(LOW,IAXIS,stage), limits(HIGH,IAXIS,stage)+1*is
        ! Add artificial viscosity for strong-shock capturing
        avisc = cvisc*max(-(scr_rope(HY_VELX+dir-1,i,j,k) &
                            - scr_rope(HY_VELX+dir-1,i-1*is,j-1*js,k-1*ks)),0.)
        ! Construct minus and plus TOTAL energy densities
        VenerLo = scr_rope(HY_DENS,i-1*is,j-1*js,k-1*ks) &
                  *0.5*(dot_product(scr_rope(HY_VELX:HY_VELZ,i-1*is,j-1*js,k-1*ks), &
                                    scr_rope(HY_VELX:HY_VELZ,i-1*is,j-1*js,k-1*ks)))&
                  + scr_rope(HY_RHOE,i-1*is,j-1*js,k-1*ks)
        VenerHi = scr_rope(HY_DENS,i,j,k) &
                  *0.5*(dot_product(scr_rope(HY_VELX:HY_VELZ,i,j,k), &
                                    scr_rope(HY_VELX:HY_VELZ,i,j,k)))&
                  + scr_rope(HY_RHOE,i,j,k)

        scr_flux(HY_MASS:HY_ENER,i,j,k) = &
           scr_flux(HY_MASS:HY_ENER,i,j,k) &
              + avisc*(/ scr_rope(HY_DENS,i-1*is,j-1*js,k-1*ks) - scr_rope(HY_DENS,i,j,k), &
                         scr_rope(HY_DENS,i-1*is,j-1*js,k-1*ks)*scr_rope(HY_VELX,i-1*is,j-1*js,k-1*ks) &
                              - scr_rope(HY_DENS,i,j,k)*scr_rope(HY_VELX,i,j,k), &
                         scr_rope(HY_DENS,i-1*is,j-1*js,k-1*ks)*scr_rope(HY_VELY,i-1*is,j-1*js,k-1*ks) &
                              - scr_rope(HY_DENS,i,j,k)*scr_rope(HY_VELY,i,j,k), &
                         scr_rope(HY_DENS,i-1*is,j-1*js,k-1*ks)*scr_rope(HY_VELZ,i-1*is,j-1*js,k-1*ks) &
                              - scr_rope(HY_DENS,i,j,k)*scr_rope(HY_VELZ,i,j,k), &
                          VenerLo - VenerHi &
                       /)

#ifdef SPARK_GLM
        scr_flux(HY_FMGX:HY_FPSI,i,j,k) = &
              scr_flux(HY_FMGX:HY_FPSI,i,j,k) &
                 + avisc*(/ scr_rope(HY_MAGX,i-1*is,j-1*js,k-1*ks) - scr_rope(HY_MAGX,i,j,k), &
                            scr_rope(HY_MAGY,i-1*is,j-1*js,k-1*ks) - scr_rope(HY_MAGY,i,j,k), &
                            scr_rope(HY_MAGZ,i-1*is,j-1*js,k-1*ks) - scr_rope(HY_MAGZ,i,j,k), &
                            scr_rope(HY_PSIB,i-1*is,j-1*js,k-1*ks) - scr_rope(HY_PSIB,i,j,k) &
                         /)
#endif
              ! Here, we compute the species and mass scalar
              ! fluxes based on the density flux and the hy_reconstructed
              ! mass scalar interface values
#if NSPECIES+NMASS_SCALARS>0
              ! AH: TODO: Potentially make loop explicit
         if (scr_flux(HY_MASS ,i,j,k) > 0.) then
            scr_flux(HY_NUM_FLUX+1:NFLUXES,i,j,k) = &
               scr_uPlus(HY_NUM_VARS+1:NRECON,i-1*is,j-1*js,k-1*ks)*scr_flux(HY_MASS,i,j,k)
         else
            scr_flux(HY_NUM_FLUX+1:NFLUXES,i,j,k) = &
               scr_uMinus(HY_NUM_VARS+1:NRECON,i,j,k)*scr_flux(HY_MASS,i,j,k)
         end if
#endif
     enddo
     enddo
     enddo
     ! call Timers_stop("avisc")

     ! call Timers_start("flux")
     ! ***************
     ! Fluxes computed for one face of this zone
     ! Save the fluxes
     ! ***************
     select case(dir)
     case(IAXIS)
        @M hy_DIR_parallel_loop_simd(3) &
        @M hy_DIR_shared([scr_flux, flx])
        do k = limits(LOW,KAXIS,stage), limits(HIGH,KAXIS,stage)
        do j = limits(LOW,JAXIS,stage), limits(HIGH,JAXIS,stage)
        do i = limits(LOW,IAXIS,stage), limits(HIGH,IAXIS,stage)+1
           do v = 1, NFLUXES
              flx(v,i,j,k) = scr_flux(v,i,j,k)
           end do
        enddo
        enddo
        enddo
     case (JAXIS)
        @M hy_DIR_parallel_loop_simd(3) &
        @M hy_DIR_shared([scr_flux, fly])
        do k = limits(LOW,KAXIS,stage), limits(HIGH,KAXIS,stage)
        do j = limits(LOW,JAXIS,stage), limits(HIGH,JAXIS,stage)+1
        do i = limits(LOW,IAXIS,stage), limits(HIGH,IAXIS,stage)
           do v = 1, NFLUXES
              fly(v,i,j,k) = scr_flux(v,i,j,k)
           end do
        enddo
        enddo
        enddo
     case (KAXIS)
        @M hy_DIR_parallel_loop_simd(3) &
        @M hy_DIR_shared([scr_flux, flz])
        do k = limits(LOW,KAXIS,stage), limits(HIGH,KAXIS,stage)+1
        do j = limits(LOW,JAXIS,stage), limits(HIGH,JAXIS,stage)
        do i = limits(LOW,IAXIS,stage), limits(HIGH,IAXIS,stage)
           do v = 1, NFLUXES
              flz(v,i,j,k) = scr_flux(v,i,j,k)
           end do
        enddo
        enddo
        enddo
     end select
     ! call Timers_stop("flux")
  end do ! dir

contains

   real function minmod(a,b)
     implicit none
     real :: a,b
     minmod=.5 * (sign(1.,a) + sign(1.,b))*min(abs(a),abs(b))
   end function minmod

   real function median(a,b,c)
     implicit none
     real :: a,b,c
     median = a + minmod(b-a,c-a)
   end function median

   subroutine hy_recon(scr_rope, scr_uPlus, scr_uMinus,loGC, is, js, ks, i,j,k,v)
     implicit none
     integer, intent(IN) :: i,j,k,v, is, js, ks
     integer, intent(IN) :: loGC(3)
     real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(INOUT) :: &
          scr_rope,scr_uPlus, scr_uMinus
      integer :: ii, jj, kk
 
     real :: invSumAlpha, abs_betadiff
     real, dimension(5) :: stencil
     real, dimension(3) :: W5p, W5m, betaWeno, Alpha5, omega
     real :: mags, betaSum
     !! Set WENO5 coefficients once and for all
     !u_{1,i+1/2}= 2/6*u_{i-2} -7/6*u_{i-1} +11/6*u_{i}
     real, dimension(3) :: coeff1p1 = (/ 2./6., -7./6., 11./6./)
     !u_{2,i+1/2}=-1/6*u_{i-2} +5/6*u_{i-1} + 2/6*u_{i}
     real, dimension(3) :: coeff1p2 = (/-1./6.,  5./6.,  2./6./)
     !u_{3,i+1/2}= 2/6*u_{i-2} +5/6*u_{i-1} - 1/6*u_{i}
     real, dimension(3) :: coeff1p3 = (/ 2./6.,  5./6., -1./6./)
     ! linear weights for i+1/2, (gamma1,gamma2,gamma3)
     real, dimension(3) :: linWp   = (/0.1, 0.6, 0.3/)
     !u_{1,i-1/2}=-1/6*u_{i-2} +5/6*u_{i-1} + 2/6*u_{i}
     real, dimension(3) :: coeff1m1 = (/-1./6.,  5./6.,  2./6./)
     !u_{2,i-1/2}= 2/6*u_{i-2} +5/6*u_{i-1} - 1/6*u_{i}
     real, dimension(3) :: coeff1m2 = (/ 2./6.,  5./6., -1./6./)
     !u_{3,i-1/2}=11/6*u_{i-2} -7/6*u_{i-1} + 2/6*u_{i}
     real, dimension(3) :: coeff1m3 = (/ 11./6.,-7./6.,  2./6./)
     ! linear weights for i-1/2, (gamma1,gamma2,gamma3)
     real, dimension(3) :: linWm   = (/0.3, 0.6, 0.1/)
     
     real, parameter :: epsilon = 1.e-36
     real, parameter :: n13o12 = 13./12.
     
     integer, parameter :: cntr = 3   ! five-point stencil, center idx == 3
     
     s = 1
     do kk = k-2*ks, k+2*ks
        do jj = j-2*js, j+2*js
           do ii = i-2*is, i+2*is
              stencil(s) = scr_rope(v, ii, jj, kk)
              s = s + 1
           enddo
        enddo
     enddo
     
     W5p(1) = dot_product(coeff1p1(1:3), stencil(cntr-2:cntr+0))
     W5p(2) = dot_product(coeff1p2(1:3), stencil(cntr-1:cntr+1))
     W5p(3) = dot_product(coeff1p3(1:3), stencil(cntr-0:cntr+2))
     !!
     !! Calculate smoothness indicators at i+1/2
     betaWeno(1) = n13o12*( stencil(cntr-2) - 2.*stencil(cntr-1) + stencil(cntr) )**2 &
          + 0.25*( stencil(cntr-2) - 4.*stencil(cntr-1) + 3.*stencil(cntr) )**2
     betaWeno(2) = n13o12*( stencil(cntr-1) - 2.*stencil(cntr) + stencil(cntr+1) )**2 &
          + 0.25*( stencil(cntr-1) - stencil(cntr+1) )**2
     betaWeno(3) = n13o12*( stencil(cntr) - 2.*stencil(cntr+1) + stencil(cntr+2) )**2 &
          + 0.25*( 3.*stencil(cntr) - 4.*stencil(cntr+1) + stencil(cntr+2) )**2
     !!
     !! Use problem-adaptive epsilong as in Tchekovskoy7, A3
     ! This does not seem to work with the WENO-Z indicators of Borges+08
     ! mags(v) = scr_rope(@M ind_m(2))**2 + scr_rope(@M ind_m(1))**2 + scr_rope(@M ind_p(0))**2 &
     !      + scr_rope(@M ind_p(1))**2 + scr_rope(@M ind_p(2))**2
     ! betaWeno(1) = betaWeno(1) + epsilon*mags(v) + TINY(1.0)
     ! betaWeno(2) = betaWeno(2) + epsilon*mags(v) + TINY(1.0)
     ! betaWeno(3) = betaWeno(3) + epsilon*mags(v) + TINY(1.0)
     !!
     !! This is WENO-Zv this is very similar to weno5 with wenoExp=1
     abs_betadiff = abs(betaWeno(1) - betaWeno(3))
     Alpha5(1:3) = linWp(1:3)*(1. + abs_betadiff/(betaWeno(1:3) + epsilon))
     !!
     !! Normalize nonlinear weights at i+1/2
     invSumAlpha = 1./sum(Alpha5(1:3))
     omega(1:3) = invSumAlpha*Alpha5(1:3)
     !!
     !! Compute interface value at i+1/2
     scr_uPlus(v,i,j,k)  = dot_product(omega(1:3), W5p(1:3))
     !! Apply flattening
     scr_uPlus(v ,i,j,k) = flat3d(i,j,k)*scr_uPlus(v ,i,j,k) + (1.-flat3d(i,j,k))*stencil(cntr)
     !!
     !! Now move on to i-1/2
     !!  
     !! Calculate interface values at i-1/2
     W5m(1) = dot_product(coeff1m1(1:3), stencil(cntr-2:cntr+0))
     W5m(2) = dot_product(coeff1m2(1:3), stencil(cntr-1:cntr+1))
     W5m(3) = dot_product(coeff1m3(1:3), stencil(cntr-0:cntr+2))
     !! This is WENO-Z
     Alpha5(1:3) = linWm(1:3)*(1. + abs_betadiff/(betaWeno(1:3) + epsilon))
     !!
     !! Normalize nonlinear weights at i-1/2
     invSumAlpha = 1./sum(Alpha5(1:3))
     omega(1:3) = invSumAlpha*Alpha5(1:3)
     !!
     !! Compute interface value at i-1/2
     scr_uMinus(v,i,j,k) = dot_product(omega(1:3), W5m(1:3))
     !! Apply flattening
     scr_uMinus(v ,i,j,k) = flat3d(i,j,k)*scr_uMinus(v ,i,j,k) + (1.-flat3d(i,j,k))*stencil(cntr)
     !! Check for monotonicity
     if ( (scr_uPlus(v,i,j,k)-stencil(cntr))*(stencil(cntr)-scr_uMinus(v,i,j,k)) <= 0. ) then
        scr_uPlus(v,i,j,k)  = stencil(cntr)
        scr_uMinus(v,i,j,k) = stencil(cntr)
     end if
   end subroutine hy_recon

   
end subroutine hy_rk_getFaceFlux
