!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!<

!!NOVARIANTS
!!Reorder(4): Uin,hy_starState,hy_tmpState
subroutine Hydro_prepBlock(Uin, hy_Vc, blkLimits, blkLimitsGC, hy_starState, hy_tmpState, &
                           stage, lo, loGC)

#include "Simulation.h"
#include "constants.h"

   use hy_rk_interface, ONLY: hy_rk_shockDetect, &
                              hy_rk_initSolnScratch
   use Hydro_data, ONLY: hy_telescoping

!!$   @M hy_DIR_TARGET_routine(vector)
!!$
!!$   @M hy_DIR_TARGET_routine_vector(hy_rk_shockDetect)
!!$   @M hy_DIR_TARGET_routine_vector(hy_rk_initSolnScratch)

   implicit none

   integer, intent(IN) :: lo(3), loGC(3)
   real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN OUT) :: Uin
   real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(OUT) :: hy_starState, hy_tmpState
   real, dimension(loGC(1):, loGC(2):, loGC(3):), intent(OUT) :: hy_Vc
   integer, dimension(LOW:HIGH, MDIM), intent(IN) :: blkLimits, blkLimitsGC
   integer, intent(IN) :: stage

   @M hy_calcDivB
   if (hy_telescoping .OR. stage == 1) call hy_rk_shockDetect(Uin, hy_Vc, blkLimitsGC, loGC)
   call hy_rk_initSolnScratch(stage, Uin, hy_starState, hy_tmpState, &
                              blkLimits, blkLimitsGC, lo, loGC)

end subroutine Hydro_prepBlock

