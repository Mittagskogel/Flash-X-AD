
[hy_scratch_arrays]
definition =
       hya_starState,hya_tmpState, &
       hya_uPlus, hya_uMinus, hya_Vc, hya_grav, hya_flat3d, hya_flat,&
       hya_rope, hya_flux, hya_shck, &
       hya_flx, hya_fly, hya_flz, hya_fluxBufX, hya_fluxBufY, hya_fluxBufZ,&
       hya_fareaX,hya_fareaY,hya_fareaZ,hya_cvol, &
       hya_xCenter,hya_xLeft,hya_xRight, &
       hya_yCenter,hya_yLeft,hya_yRight, &
       hya_zCenter

[hy_scratch_ptrs]
definition =
  hy_tmpState,hy_starState,hy_flx,hy_fly,hy_flz,&
       hy_fluxBufX,hy_fluxBufY,hy_fluxBufZ, &
       hy_rope, hy_flux, hy_uPlus, hy_uMinus, &
       hy_grav, hy_flat3d, hy_Vc, &
       hy_fareaX,hy_fareaY,hy_fareaZ,hy_cvol, &
       hy_xCenter,hy_xLeft,hy_xRight,hy_yCenter,hy_yLeft,hy_yRight,hy_zCenter

[hy_bounds]
definition =
  lim,limgc,gcells,limits

[hy_scratch_declare]
definition=
  real,dimension(1:NUNK_VARS,@M bounds_3d(blkLimitsGC)):: hy_tmpState,hy_starState
  real, dimension(@M hy_mapflxGC) :: hy_flx
  real, dimension(@M hy_mapflyGC) :: hy_fly
  real, dimension(@M hy_mapflzGC) :: hy_flz
  real, dimension(@M hy_mapflx) :: hy_fluxBufX
  real, dimension(@M hy_mapfly) :: hy_fluxBufY
  real, dimension(@M hy_mapflz) :: hy_fluxBufZ
       hy_rope, hy_flux, hy_uPlus, hy_uMinus
  real,dimension(1:MDIM, @M bounds_3d(blkLimitsGC)) :: hy_grav  
  real,dimension(@M bounds_3d(blkLimitsGC)) :: hy_flat3d, hy_Vc
  real,dimension(@M bounds_3d(blkLimitsGC)) ::hy_fareaX,hy_fareaY,hy_fareaZ,hy_cvol
  real,dimension(@M bounds_1d(I,blkLimitsGC)) :: hy_xCenter,hy_xLeft,hy_xRight
  real,dimension(@M bounds_1d(J,blkLimitsGC)) :: hy_yCenter,hy_yLefthy_yRight
  real,dimension(@M bounds_1d(K,blkLimitsGC)) :: hy_zCentegr
  real,dimension(1:NRECON, @M bounds_3d(blkLimitsGC))::hy_rope
  real,dimension(1:NFLUXES, @M bounds_3d(blkLimitsGC))::hy_flux
  real,dimension(1:NRECON, @M bounds_3d(blkLimitsGC))::hy_uPlus
  real,dimension(1:NRECON, @M bounds_3d(blkLimitsGC))::hy_uMinus

[hy_scratch_ptr_declare]
definition=
  real, pointer,dimension(:,:,:,:) :: hy_tmpState,hy_starState,hy_flx,hy_fly,hy_flz,&
       hy_fluxBufX,hy_fluxBufY,hy_fluxBufZ, &
       hy_rope, hy_flux, hy_uPlus, hy_uMinus
  real, pointer, dimension(:,:,:,:) :: hy_grav   ! this should be a separate line to prevent REORDER
  real, pointer, dimension(:,:,:) :: hy_flat3d, hy_Vc
  real,pointer,dimension(:,:,:) ::hy_fareaX,hy_fareaY,hy_fareaZ,hy_cvol
  real,pointer,dimension(:) :: hy_xCenter,hy_xLeft,hy_xRight,hy_yCenter,hy_yLeft,hy_yRight,hy_zCenter


[hy_bounds_declare]
definition=
  integer, dimension(MDIM) :: gCells
  integer, dimension(LOW:HIGH, MDIM, NDIM, MAXSTAGE) :: lim, limgc
  integer, dimension(LOW:HIGH, MDIM, MAXSTAGE) :: limits

[hy_impl_specific_args]
definition =
   @M hy_scratch_ptrs, &
   @M hy_bounds


[hy_impl_specific_declare]
definition =
   @M hy_scratch_declare
   @M hy_bounds_declare