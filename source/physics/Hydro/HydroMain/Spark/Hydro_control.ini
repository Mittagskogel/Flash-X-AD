[hy_check_config]
definition =

           

[hy_map_geom]
definition=
           hy_fareaX(@M bounds_3d(blkLimitsGC))=>hya_fareaX
           hy_fareaY(@M bounds_3d(blkLimitsGC))=>hya_fareaY
           hy_fareaZ(@M bounds_3d(blkLimitsGC))=>hya_fareaZ
           hy_cvol(@M bounds_3d(blkLimitsGC))=>hya_cvol
           hy_xCenter(@M bounds_1d(blkLimitsGC,IAXIS))=>hya_xCenter
           hy_xLeft(@M bounds_1d(blkLimitsGC,IAXIS))=>hya_xLeft
           hy_xRight(@M bounds_1d(blkLimitsGC,IAXIS))=>hya_xRight
           hy_yCenter(@M bounds_1d(blkLimitsGC,JAXIS))=>hya_yCenter
           hy_yLeft(@M bounds_1d(blkLimitsGC,JAXIS))=>hya_yLeft
           hy_yRight(@M bounds_1d(blkLimitsGC,JAXIS))=>hya_yRight
           hy_zCenter(@M bounds_1d(blkLimitsGC,KAXIS))=>hya_zCenter


[hy_nullFluxBuf]
definition=
   nullify(hy_fluxBufX)
   nullify(hy_fluxBufY)
   nullify(hy_fluxBufZ)


[hy_nullFl]
definition=
   nullify(hy_flx)
   nullify(hy_fly)
   nullify(hy_flz)

[hy_map_tmp_states]
definition=
        hy_starState(1:NUNK_VARS,@M bounds_3d(blkLimitsGC))=>hya_starState
        hy_tmpState(1:NUNK_VARS,@M bounds_3d(blkLimitsGC))=>hya_tmpState

[hy_map_grav]
definition=
   hy_grav(1:MDIM, @M bounds_3d(blkLimitsGC))=>hya_grav

[hy_nullGrav]
definition=
   nullify(hy_grav)

[hy_map_flat3d]
definition=
   hy_flat3d(@M bounds_3d(blkLimitsGC))=>hya_flat3d

[hy_map_Vc]
definition=
   hy_Vc(@M bounds_3d(blkLimitsGC))=>hya_Vc

[hy_nullFlat3d]
definition=
   nullify(hy_flat3d)

[hy_nullVc]
definition=
   nullify(hy_Vc)

[hy_map_faceFlux_scr]
definition=
   hy_rope(1:NRECON, @M bounds_3d(blkLimitsGC))=>hya_rope
   hy_flux(1:NFLUXES, @M bounds_3d(blkLimitsGC))=>hya_flux
   hy_uPlus(1:NRECON, @M bounds_3d(blkLimitsGC))=>hya_uPlus
   hy_uMinus(1:NRECON, @M bounds_3d(blkLimitsGC))=>hya_uMinus

[hy_nullFaceFlux_scr]
definition=
   nullify(hy_rope)
   nullify(hy_flux)
   nullify(hy_uPlus)
   nullify(hy_uMinus)


[hy_map_scr_ptrs]
definition=
        hy_flx(1:NFLUXES,@M bounds_3d(blkLimitsGC))=>hya_flx
        hy_fly(1:NFLUXES,@M bounds_3d(blkLimitsGC))=>hya_fly
        hy_flz(1:NFLUXES,@M bounds_3d(blkLimitsGC))=>hya_flz
        hy_fluxBufX(1:NFLUXES,@M bounds_3d_plus(blkLimits,1,0,0))=>hya_fluxBufX
        hy_fluxBufY(1:NFLUXES,@M bounds_3d_plus(blkLimits,0,1,0))=>hya_fluxBufY
        hy_fluxBufZ(1:NFLUXES,@M bounds_3d_plus(blkLimits,0,0,1))=>hya_fluxBufZ
        @M hy_map_grav
        @M hy_map_flat3d
        @M hy_map_Vc
        @M hy_map_faceFlux_scr

[hy_release_tmp_states]
definition=
        nullify(hy_starState)
        nullify(hy_tmpState)


[hy_release_scr_ptrs]
definition=
        @M hy_nullFl
        @M hy_nullFluxBuf
        @M hy_nullGrav
        @M hy_nullFlat3d
        @M hy_nullVc
        @M hy_nullFaceFlux_scr


[hy_setLimits]
definition=
  ! based on each stage for telescoping update
  do stage = 1, MAXSTAGE
    ng = (MAXSTAGE-stage)*NSTENCIL
    limits(:,:,stage) = blkLimits(:,:)
    do dir=1,NDIM
       limits(LOW ,dir, stage) = blkLimits(LOW ,dir) - ng
       limits(HIGH,dir, stage) = blkLimits(HIGH,dir) + ng
    end do
  end do

[hy_updateState]
definition=
 #ifdef GPOT_VAR
  ! First reset GPOT_VAR.
  hy_starState(GPOT_VAR,@M bounds_3d(blkLimits)) = &
       Uin(GPOT_VAR,@M bounds_3d(blkLimits))
 #endif
  Uin(:,@M bounds_3d(blkLimits)) = &
       hy_starState(:,@M bounds_3d(blkLimits))

[hy_saveState]
definition=
  @M hy_DIR_parallel_loop_simd(3) &
  @M hy_DIR_private([v])
  @M loop_3d(blkLimitsGC,i,j,k)
      ! update temp vars with solution data
      do v=1,NUNK_VARS
         starState(v,i,j,k)=Uin(v,i,j,k)
         tmpState(v,i,j,k)=Uin(v,i,j,k)
      end do
  @M loop_end_3d

[hy_stages_t]
definition = 
  do stage=1,last_stage 

[hy_end_stages_t]
definition =
   end do

[hy_stages_nt]
definition = 

[hy_end_stages_nt]
definition = 


[hy_fill_geom]
definition=
	   @M Grid_Areas(hy_globalLbnd,IAXIS,hy_geometry,blkLimitsGC,deltas,hy_fareaX,i,j,k)
	   @M Grid_getCellVol(hy_globalLbnd,hy_geometry,blkLimitsGC,deltas,hy_cvol,i,j,k)
	   @M Grid_getCenterCoords(hy_globalLBnd,IAXIS,blkLimitsGC,deltas,hy_xCenter)
	   @M Grid_getLeftEdgeCoords(hy_globalLBnd,IAXIS,blkLimitsGC,deltas,hy_xLeft)
	   @M Grid_getRightEdgeCoords(hy_globalLBnd,IAXIS,blkLimitsGC,deltas,hy_xRight)
           if(NDIM>1) then
              @M Grid_Areas(hy_globalLbnd,JAXIS,hy_geometry,blkLimitsGC,deltas,hy_fareaY,i,j,k)
	     @M Grid_getCenterCoords(hy_globalLBnd,JAXIS,blkLimitsGC,deltas,hy_yCenter) 
	     @M Grid_getLeftEdgeCoords(hy_globalLBnd,JAXIS,blkLimitsGC,deltas,hy_yLeft)
	     @M Grid_getRightEdgeCoords(hy_globalLBnd,JAXIS,blkLimitsGC,deltas,hy_yRight)
           endif
           if(NDIM>2) then
              @M Grid_Areas(hy_globalLbnd,KAXIS,hy_geometry,blkLimitsGC,deltas,hy_fareaZ,i,j,k)
	      @M Grid_getCenterCoords(hy_globalLBnd,KAXIS,blkLimitsGC,deltas,hy_zCenter)
           endif


[hy_release_geom]
definition=
              @M hy_release_fareas
              nullify(hy_cvol)
              nullify(hy_xCenter)
              nullify(hy_xLeft)
              nullify(hy_xRight)
              nullify(hy_yCenter)
              nullify(hy_yLeft)
              nullify(hy_yRight)
              nullify(hy_zCenter)

[hy_fill_fareas]
definition=
           hy_fareaX(@M bounds_3d(blkLimitsGC))=>hya_fareaX
           hy_fareaY(@M bounds_3d(blkLimitsGC))=>hya_fareaY
           hy_fareaZ(@M bounds_3d(blkLimitsGC))=>hya_fareaZ
           @M Grid_Areas(hy_globalLbnd,IAXIS,hy_geometry,blkLimitsGC,deltas,hy_fareaX,i,j,k)
           if (NDIM > 1) then
             @M Grid_Areas(hy_globalLbnd,JAXIS,hy_geometry,blkLimitsGC,deltas,hy_fareaY,i,j,k)
           end if
           if (NDIM > 2) then
              @M Grid_Areas(hy_globalLbnd,KAXIS,hy_geometry,blkLimitsGC,deltas,hy_fareaZ,i,j,k)
           end if

[hy_release_fareas]
definition=
              nullify(hy_fareaX)
              nullify(hy_fareaY)
              nullify(hy_fareaZ)


[hy_normalize_species]
args=hy_u
definition=
  hy_u(HY_DENS ,i,j,k) = max(smalld, hy_u(HY_DENS ,i,j,k))
  hy_u(HY_PRES ,i,j,k) = max(smallp, hy_u(HY_PRES ,i,j,k))
 #if NSPECIES>0
  spc(1:NSPECIES) = hy_u(HY_NUM_VARS+1:HY_NUM_VARS+NSPECIES ,i,j,k)
  do s=1,NSPECIES
     spc(s) = max(smallx, min(1.0,spc(s)))
  end do
  spcSumInv = 1./sum(spc(1:NSPECIES))
  spc(1:NSPECIES) = spc(1:NSPECIES)*spcSumInv
  hy_u(HY_NUM_VARS + 1:HY_NUM_VARS + NSPECIES, i, j, k) = spc(1:NSPECIES)
 #endif

[hy_globalFillGuardCells]
definition =
  if (.NOT.gcMaskLogged) then
     call Logfile_stampVarMask(hy_gcMask, .TRUE., '[Hydro]', 'gcReq')
  end if
  call Grid_fillGuardCells(CENTER, ALLDIR, doEos=.TRUE., eosMode=hy_eosModeGc, &
       maskSize=NUNK_VARS, mask=hy_gcMask, &
       makeMaskConsistent=.true., &
       selectBlockType=LEAF, &
       doLogMask=.NOT.gcMaskLogged)

[hy_tmpState_dimension]
definition=
  dimension(1:, loGC(1):, loGC(2):, loGC(3):)

