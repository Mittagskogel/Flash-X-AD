!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!<
!!Reorder(4): fl[xyz], fluxBuf[XYZ]
!!NOVARIANTS
subroutine hy_rk_saveFluxBuf(fluxBufX, fluxBufY, fluxBufZ, &
                             flx, fly, flz, &
                             weights, stage, fluxCorrect, &
                             blkLimits, &
                             fareaX, fareaY, fareaZ)

#include "Simulation.h"
#include "constants.h"

   use Hydro_data, ONLY : hy_threadWithinBlock

   implicit none

   real, dimension(:,:,:,:), pointer :: fluxBufX, fluxBufY, fluxBufZ
   real, dimension(:,:,:,:), pointer :: flx, fly, flz
   real, dimension(3), intent(IN) :: weights
   integer, intent(IN) :: stage
   logical, intent(IN) :: fluxCorrect
   integer, dimension(LOW:HIGH, MDIM), intent(IN) :: blkLimits
   real, dimension(:,:,:), pointer :: fareaX, fareaY, fareaZ

   real :: wt
   integer :: i, j, k, v

   if (.not. fluxCorrect) return

   wt = 0.0
   if (stage > 1) wt = 1.0
  @M hy_DIR_TARGET_enter_data(to, [wt, stage, weights])

   @M hy_DIR_parallel_loop_simd(3) &
   @M hy_DIR_TARGET_map(to, [weights]) &
   @M hy_DIR_shared([blkLimits, weights, stage, wt, fluxBufX, flx, fareaX]) &
   @M hy_DIR_end
   @M loop_3d_plus(blkLimits,1,0,0)
      do v = 1, NFLUXES
         @M hy_saveFluxBuf(fluxBufX, fareaX, flx)
      end do
   @M loop_end_3d

#if NDIM > 1
   @M hy_DIR_parallel_loop_simd(3) &
   @M hy_DIR_TARGET_map(to, [weights]) &
   @M hy_DIR_shared([blkLimits, weights, stage, wt, fluxBufY, fly, fareaY]) &
   @M hy_DIR_end
   @M loop_3d_plus(blkLimits,0,1,0)
      do v = 1, NFLUXES
         @M hy_saveFluxBuf(fluxBufY, fareaY, fly)
      end do
   @M loop_end_3d
#endif

#if NDIM > 2
   @M hy_DIR_parallel_loop_simd(3) &
   @M hy_DIR_TARGET_map(to, [weights]) &
   @M hy_DIR_shared([blkLimits, weights, stage, wt, fluxBufZ, flz, fareaZ]) &
   @M hy_DIR_end
   @M loop_3d_plus(blkLimits,0,0,1)
      do v = 1, NFLUXES
         @M hy_saveFluxBuf(fluxBufZ, fareaZ, flz)
      end do
   @M loop_end_3d
#endif

  @M hy_DIR_TARGET_exit_data(release, [wt, stage, weights])

end subroutine hy_rk_saveFluxBuf
