
[hy_addFluxes]
definition=
     @M loop_3d_plus(blkLimits,1,0,0)
        hy_fluxBufX(1:NFLUXES,i,j,k) = weights(stage)*hy_flx(1:NFLUXES,i,j,k) 
     @M loop_end_3d
     if (NDIM > 1) then
         @M loop_3d_plus(blkLimits,0,1,0)
          hy_fluxBufY(1:NFLUXES,i,j,k) = weights(stage)*hy_fly(1:NFLUXES,i,j,k)
        @M loop_end_3d
     end if	 
     if (NDIM > 2) then
        @M loop_3d_plus(blkLimits,0,0,1)
          hy_fluxBufZ(1:NFLUXES,i,j,k) = weights(stage)*hy_flz(1:NFLUXES,i,j,k)
	 @M loop_end_3d
     end if
     call Grid_putFluxData_block(tileDesc,&
          hy_fluxBufX,hy_fluxBufY,hy_fluxBufZ,blkLimits(LOW,:),&
           addFlux_array(stage))



[hy_saveGlobalState]
definition =
     nullify(Uin)
     nullify(hy_tmpState)
     @M iter_all_begin(LEAF,.false.,blkLimits,blkLimitsGC)
        call tileDesc%%getDataPtr(hy_tmpState, SCRATCH_CTR)
	 @M loop_3d(blkLimitsGC)
           hy_tmpState(HY_MASS,i,j,k)=Uin(DENS_VAR,i,j,k)
           hy_tmpState(HY_ENER,i,j,k)=Uin(ENER_VAR,i,j,k)*Uin(DENS_VAR,i,j,k)
           hy_tmpState(HY_XMOM,i,j,k)=Uin(VELX_VAR,i,j,k)*Uin(DENS_VAR,i,j,k)
           hy_tmpState(HY_YMOM,i,j,k)=Uin(VELY_VAR,i,j,k)*Uin(DENS_VAR,i,j,k)
           hy_tmpState(HY_ZMOM,i,j,k)=Uin(VELZ_VAR,i,j,k)*Uin(DENS_VAR,i,j,k)
	   hy_tmpState(HY_NUM_FLUX+1:NFLUXES,i,j,k)=Uin(SPECIES_BEGIN:MASS_SCALARS_END,i,j,k)*Uin(DENS_VAR,i,j,k)
        @M loop_end_3d
	nullify(hy_tmpState)
      @M iter_end

[hy_map_tmp_states]
definition=
    hy_starState => Uin
    nullify(hy_tmpState)
    call tileDesc%%getDataPtr(hy_tmpState, SCRATCH_CTR)

[hy_release_tmp_states]
definition=
   nullify(hy_starState)
   nullify(hy_tmpState)



[hy_saveState]
definition =
  ! update temp vars with solution data
  if(stage==1) then
    @M loop_3d(blkLimitsGC)
     hy_tmpState(HY_MASS,i,j,k) = Uin(DENS_VAR,i,j,k)
     hy_tmpState(HY_XMOM:HY_ZMOM,i,j,k)= Uin(DENS_VAR,i,j,k)*Uin(VELX_VAR:VELZ_VAR,i,j,k)
     hy_tmpState(HY_ENER,i,j,k) = Uin(DENS_VAR,i,j,k)*Uin(ENER_VAR,i,j,k)
     hy_tmpState(HY_NUM_FLUX+1:NFLUXES,i,j,k) = &
	Uin(SPECIES_BEGIN:MASS_SCALARS_END,i,j,k)*Uin(DENS_VAR,i,j,k)
    @M loop_end_3d
  end if

[hy_updateState]
definition =
  

[hy_stages_t]
definition = 

[hy_end_stages_t]
definition = 


[hy_stages_nt]
definition = 
  do stage=1,last_stage 

[hy_end_stages_nt]
definition =
   end do



[hy_setLims]
args=ng
definition=
  limits = blkLimits
