!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file
!> @ingroup HydroSpark
!!REORDER(4): solnData
!!NOVARIANTS

#include "constants.h"
#include "Simulation.h"

subroutine hy_rk_renormAbundance(tileLimits, solnData, smallx)

   use Hydro_data, ONLY : hy_threadWithinBlock
   use Driver_interface, ONLY : Driver_abort

   implicit none

   integer, intent(IN) :: tileLimits(LOW:HIGH,MDIM)
   real, pointer :: solnData(:,:,:,:)
   real, intent(IN) :: smallx

   integer :: i, j, k, n

   real :: abundSum, suminv, error

   real, parameter :: abundErr = 1.e-4

#if NSPECIES > 0

   @M hy_DIR_parallel_loop(3) &
   @M hy_DIR_TARGET_map(to, [tileLimits]) &
   @M hy_DIR_private([n, abundSum, sumInv, error]) &
   @M hy_DIR_shared([tileLimits, smallx, solnData])
   do k = tileLimits(LOW, KAXIS), tileLimits(HIGH, KAXIS)
      do j = tileLimits(LOW, JAXIS), tileLimits(HIGH, JAXIS)
         do i = tileLimits(LOW, IAXIS), tileLimits(HIGH, IAXIS)
            abundSum = 0.e0

            ! loop over all of the abundances in
            !the current zone and retrict them to
            ! fall between smallx and 1.  Then
            !compute the sum of the abundances

            do n = SPECIES_BEGIN,SPECIES_END
               solnData(n,i,j,k) = &
                  max(smallx, &
                  min(1.e0,solnData(n,i,j,k)))
               abundSum = abundSum + solnData(n,i,j,k)
            enddo

            ! if the conservation is really messed up, give an error
            error = abs(abundSum - 1.e0)
#ifndef OMP_OL
            if (error >= 0.10) then
               call Driver_abort('[hy_rk_renormAbundance] Error too high in abundances')
            endif
#endif

            ! compute the inverse of the sum and multiply all of the abundances by
            ! this value to get the abundances summing to 1 once again
            suminv = 1.e0 / abundSum

            do n = SPECIES_BEGIN, SPECIES_END
               solnData(n,i,j,k) =  &
                  max(smallx, min(1.e0,suminv*&
                  solnData(n,i,j,k)))
            enddo

         enddo
      enddo
   enddo

#endif
   return
end subroutine hy_rk_renormAbundance

