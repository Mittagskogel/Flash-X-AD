[eos_corr]
args=solnData
definition =
           if (velx_map > 0 .AND. vely_map > 0 .AND. velz_map > 0) then
              kineticEnergy  = 0.5*(solnData(velx_map,i,j,k)**2 + &
                                    solnData(vely_map,i,j,k)**2 + &
                                    solnData(velz_map,i,j,k)**2)
           else
              kineticEnergy = 0.0
           end if
           n=n+1
           !! kineticEnergy holds velocity vector information -- 1/2 * Vmag**2
           !! internalEnergy holds eint (directly)  or energyTotal - ekinetic (calculated),
           !!          depending upon eintSwitch
           if(eint_map /= NONEXISTENT) then
              internalEnergy  = solnData(eint_map,i,j,k)
              if(ener_map /= NONEXISTENT) then
                 if ( solnData(ener_map,i,j,k) - kineticEnergy > max(eos_smalle, eos_eintSwitch*kineticEnergy)) then
                    internalEnergy = solnData(ener_map,i,j,k) - kineticEnergy
                 end if
              end if
           else if(game_map /= NONEXISTENT) then ! This case should be usable for R(elativistic)HD - KW
              internalEnergy  = solnData(pres_map,i,j,k) / solnData(dens_map,i,j,k) / &
                                   (solnData(game_map,i,j,k) - 1.0)
              if(ener_map /= NONEXISTENT) then
                 if ( solnData(ener_map,i,j,k) - kineticEnergy > max(eos_smalle, eos_eintSwitch*kineticEnergy)) then
                    internalEnergy = solnData(ener_map,i,j,k) - kineticEnergy
                 end if
              end if
           else if(ener_map /= NONEXISTENT) then
              internalEnergy = solnData(ener_map,i,j,k)-kineticEnergy
           else
              internalEnergy = eos_smalle
           endif


[eos_inmap]
definition = 
   pres_map = eos_mapLookup(EOSMAP_PRES,EOS_IN,gridDataStruct)
   dens_map = eos_mapLookup(EOSMAP_DENS,EOS_IN,gridDataStruct)
   temp_map = eos_mapLookup(EOSMAP_TEMP,EOS_IN,gridDataStruct)
   gamc_map = eos_mapLookup(EOSMAP_GAMC,EOS_IN,gridDataStruct)
   game_map = eos_mapLookup(EOSMAP_GAME,EOS_IN,gridDataStruct)
   eint_map = eos_mapLookup(EOSMAP_EINT,EOS_IN,gridDataStruct)
   ener_map = eos_mapLookup(EOSMAP_ENER,EOS_IN,gridDataStruct)
   velx_map = eos_mapLookup(EOSMAP_VELX,EOS_IN,gridDataStruct)
   vely_map = eos_mapLookup(EOSMAP_VELY,EOS_IN,gridDataStruct)
   velz_map = eos_mapLookup(EOSMAP_VELZ,EOS_IN,gridDataStruct)
   sumy_map = eos_mapLookup(EOSMAP_SUMY,EOS_IN,gridDataStruct)
   ye_map   = eos_mapLookup(EOSMAP_YE,  EOS_IN,gridDataStruct)
   entr_map = eos_mapLookup(EOSMAP_ENTR,EOS_IN,gridDataStruct)

[eos_outmap]
definition =
  pres_map = eos_mapLookup(EOSMAP_PRES,EOS_OUT,CENTER)
  temp_map = eos_mapLookup(EOSMAP_TEMP,EOS_OUT,CENTER)
  gamc_map = eos_mapLookup(EOSMAP_GAMC,EOS_OUT,CENTER)
  game_map = eos_mapLookup(EOSMAP_GAME,EOS_OUT,CENTER)
  eint_map = eos_mapLookup(EOSMAP_EINT,EOS_OUT,CENTER)
  ener_map = eos_mapLookup(EOSMAP_ENER,EOS_OUT,CENTER)
  entr_map = eos_mapLookup(EOSMAP_ENTR,EOS_OUT,CENTER)

[eos_gamma]
args=eosData
definition =
  ! density, internal energy taken as input
  ggprod = eos_gammam1 * eos_gasConstant
  ggprodinv = 1. / ggprod
  gam1inv   = 1. / eos_gammam1
  eosData(pres_map,i,j,k) = eosData(dens_map,i,j,k) * &
                                internalEnergy * gam1inv
  eosData(temp_map,i,j,k) = internalEnergy * ggprodinv * &
                                eos_singleSpeciesA
  if(entr_map /= NONEXISTENT) then
    eosData(entr_map,i,j,k) = (eosData(pres_map,i,j,k)/eosData(dens_map,i,j,k) +  &
          &  internalEnergy)/eosData(temp_map,i,j,k)
  end if
  if(ener_map /= NONEXISTENT)eosData(ener_map,i,j,k) = internalEnergy+kineticEnergy
  eosData(game_map,i,j,k) = eosData(pres_map,i,j,k)/&
    (internalEnergy *eosData(dens_map,i,j,k)) +1




