[hy_recon_declare]
definition=
  real :: delbar, del_p, del_m
  real, parameter :: one_sixtieth = 1./60.
  real, parameter :: four_thirds = 4./3.
  real, parameter :: alpha = 4.
  real, parameter :: eps = 1.e-10  ! 0.
  real :: d2m, d2, d2p, d2mp, d2mm, uul, umd, ulc, umin, umax, ump, Unorm


[hy_recon]
definition =
  ! First construct unlimited quartic polynomials to plus and minus sides of zone
  ! Suresh & Huynh (2.1)
  hy_uPlus(v,i,j,k)  = one_sixtieth*( 2.*hy_rope(v,i-2,j,k) - 13.*hy_rope(v,i-1,j,k) + &
           47.*hy_rope(v,i,j,k) + 27.*hy_rope(v,i+1,j,k) - 3.*hy_rope(v,i+2,j,k))
  hy_uMinus(v,i,j,k)  = one_sixtieth*(-3.*hy_rope(v,i-2,j,k) + 27.*hy_rope(v,i-1,j,k) + &
           47.*hy_rope(v,i,j,k) - 13.*hy_rope(v,i+1,j,k) + 2.*hy_rope(v,i+2,j,k))
  Unorm = SUM(hy_rope(v,i-2:i+2,j,k)**2)
  !
  ! Now compute limited slope interpolants for i+1/2
  del_p = hy_rope(v,i+1,j,k) - hy_rope(v,i,j,k)
  del_m = hy_rope(v,i,j,k)   - hy_rope(v,i-1,j,k)
  ! Loop over reconstructed variables and limit as needed
  delbar = minmod(del_p, del_m)
     ! Limit i+1/2
     ! Compute monotonic value, SH 2.12
     ump = hy_rope(v,i,j,k) + minmod(del_p, alpha*del_m)
     if ((hy_uPlus(v,i,j,k)-hy_rope(v,i,j,k))*(hy_uPlus(v,i,j,k)-ump) > eps*Unorm) then
        @M hy_mp5_calcMonotonicD2
        uul = hy_rope(v,i,j,k) + alpha*del_m
        umd = 0.5*(hy_rope(v,i,j,k) + hy_rope(v,i+1,j,k)) - 0.5*d2mp
        ulc = hy_rope(v,i,j,k) + 0.5*del_m + four_thirds*d2mm
        umin = max(min(hy_rope(v,i,j,k), hy_rope(v,i+1,j,k), umd), min(hy_rope(v,i,j,k), uul, ulc))
        umax = min(max(hy_rope(v,i,j,k), hy_rope(v,i+1,j,k), umd), max(hy_rope(v,i,j,k), uul, ulc))
        hy_uPlus(v,i,j,k) = median(umin, hy_uPlus(v,i,j,k), umax)
        !hy_uPlus(v,i,j,k) = hy_rope(v,i,j,k) + 0.5*delbar
     end if
     ! Limit i-1/2
     ump = hy_rope(v,i,j,k) - minmod(del_m, alpha*del_p)
     if ((hy_rope(v,i,j,k)-hy_uMinus(v,i,j,k))*(ump-hy_uMinus(v,i,j,k)) > eps*Unorm) then
        @M hy_mp5_calcMonotonicD2
        uul = hy_rope(v,i,j,k) - alpha*del_p
        umd = 0.5*(hy_rope(v,i,j,k) + hy_rope(v,i-1,j,k)) - 0.5*d2mm
        ulc = hy_rope(v,i,j,k) - 0.5*del_p + four_thirds*d2mp
        umin = max(min(hy_rope(v,i,j,k), hy_rope(v,i-1,j,k), umd), min(hy_rope(v,i,j,k), uul, ulc))
        umax = min(max(hy_rope(v,i,j,k), hy_rope(v,i-1,j,k), umd), max(hy_rope(v,i,j,k), uul, ulc))
        hy_uMinus(v,i,j,k) = median(umin, hy_uMinus(v,i,j,k), umax)
        !hy_uMinus(v,i,j,k) = hy_rope(v,i,j,k) - 0.5*delbar
     end if


[hy_mp5_calcMonotonicD2]
definition =
  d2m = hy_rope(v,i-2,j,k) - 2.*hy_rope(v,i-1,j,k) + hy_rope(v,i,j,k)
  d2  = hy_rope(v,i-1,j,k) - 2.*hy_rope(v,i,j,k)   + hy_rope(v,i+1,j,k)
  d2p = hy_rope(v,i,j,k)   - 2.*hy_rope(v,i+1,j,k) + hy_rope(v,i+2,j,k)
  d2mp = minmod(minmod(4.*d2-d2p, 4.*d2p-d2), minmod(d2, d2p))
  d2mm = minmod(minmod(4.*d2m-d2, 4.*d2-d2m), minmod(d2m, d2))


