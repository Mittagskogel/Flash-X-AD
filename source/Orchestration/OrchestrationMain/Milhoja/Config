##python3:genLines

def genLines(setupvars):
    # This is not yet under official testing and its functionality is presently
    # limited to pseudo-UG.  Also, the interfaces will go through serious
    # changes.
    yield 'UNOFFICIAL'

    yield 'PPDEFINE FLASHX_ORCHESTRATION_MILHOJA'
    yield 'LIBRARY milhoja'  # Milhoja for Orchestration

    # No need for 'LIBRARY milhoja_*' since the Milhoja Grid implementation should
    # already declare that

    # Only works with the Flash-X Milhoja Grid implementation
    if 'Grid' not in setupvars:
        yield 'SETUPERROR Grid setup variable not set'
#    if setupvars['Grid'].lower() != 'milhoja':
#        yield 'SETUPERROR Milhoja orchestration must use the Milhoja Grid implementation'
#    yield 'REQUIRES Grid/GridMain/AMR/Milhoja'
    yield 'REQUIRES Grid/GridMain/fakeMilhoja'  # BALLABALLA

    yield 'D or_nBytesInCpuMemoryPool   N bytes in CPU memory pool'
    yield 'D or_nThreadTeams            N thread teams to create'
    yield 'D or_nThreadsPerTeam         N threads that each team has available upon creation'
    # This should be an integer.  However, normal values will likely exceed a
    # 32-bit integer.  Therefore, set as a real and let the unit implementation
    # cast to an appropriately-sized integer.
    yield 'PARAMETER or_nBytesInCpuMemoryPool  REAL    0.0 [ 0.0 ... ]'
    yield 'PARAMETER or_nThreadTeams           INTEGER 1   [ 1 ... ]'
    yield 'PARAMETER or_nThreadsPerTeam        INTEGER 1   [ 1 ... ]'

    # Users must specify runtime variant
    #   - (grid backend, runtime backend, offloading)
    #   - assume that the Milhoja Grid implementation gets "grid backend" independently
    if 'Milhoja' not in setupvars:
        yield 'SETUPERROR Milhoja setup variable not set'
    milhoja = [e.lower() for e in setupvars['Milhoja'].split(',')]
    if len(milhoja) != 3:
        yield 'SETUPERROR Invalid N Milhoja specification values'
    _, runtime_backend, offload = milhoja

    if   runtime_backend == 'none':
        pass
    elif runtime_backend in ['cuda','gengpu','openmp','openacc']:
        if (runtime_backend == 'cuda'):
            yield 'LIBRARY CUDA'
        if (runtime_backend == 'cuda' or runtime_backend == 'gengpu'):
            yield 'PPDEFINE ORCHESTRATION_USE_GPUS'

        yield 'PPDEFINE ORCHESTRATION_USE_DATAPACKETS'
        yield 'D or_nStreams                N streams for coordinating data transfers and kernel launches'
        yield 'D or_nBytesInGpuMemoryPools  N bytes in GPU-oriented memory pools (e.g., pinned & GPU)'
        yield 'PARAMETER or_nStreams            INTEGER 0   [ 0 ... ]'
        # This should be an integer.  However, normal values will likely exceed a 32-bit
        # integer.  Therefore, set as a real and let the unit implementation cast
        # to an appropriately-sized integer.
        yield 'PARAMETER or_nBytesInGpuMemoryPools REAL    0.0 [ 0.0 ... ]'
    else:
        yield f'SETUPERROR Invalid Milhoja runtime backend {runtime_backend}'

    if   offload == 'none':
        pass
    elif offload == 'openacc':
        yield 'LIBRARY OACC'
        yield 'PPDEFINE ORCHESTRATION_OPENACC_OFFLOAD'
    else:
        yield f'SETUPERROR Invalid Milhoja computation offloading {offload}'

